// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packets.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packets_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packets_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packets_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packets_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packets_2eproto;
namespace packet {
class FileDetails;
struct FileDetailsDefaultTypeInternal;
extern FileDetailsDefaultTypeInternal _FileDetails_default_instance_;
class InitPacket;
struct InitPacketDefaultTypeInternal;
extern InitPacketDefaultTypeInternal _InitPacket_default_instance_;
class KeyExchangePacket;
struct KeyExchangePacketDefaultTypeInternal;
extern KeyExchangePacketDefaultTypeInternal _KeyExchangePacket_default_instance_;
class LoginPacket;
struct LoginPacketDefaultTypeInternal;
extern LoginPacketDefaultTypeInternal _LoginPacket_default_instance_;
class OptionPacket;
struct OptionPacketDefaultTypeInternal;
extern OptionPacketDefaultTypeInternal _OptionPacket_default_instance_;
class OptionsPacket;
struct OptionsPacketDefaultTypeInternal;
extern OptionsPacketDefaultTypeInternal _OptionsPacket_default_instance_;
class Packet;
struct PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
}  // namespace packet
PROTOBUF_NAMESPACE_OPEN
template<> ::packet::FileDetails* Arena::CreateMaybeMessage<::packet::FileDetails>(Arena*);
template<> ::packet::InitPacket* Arena::CreateMaybeMessage<::packet::InitPacket>(Arena*);
template<> ::packet::KeyExchangePacket* Arena::CreateMaybeMessage<::packet::KeyExchangePacket>(Arena*);
template<> ::packet::LoginPacket* Arena::CreateMaybeMessage<::packet::LoginPacket>(Arena*);
template<> ::packet::OptionPacket* Arena::CreateMaybeMessage<::packet::OptionPacket>(Arena*);
template<> ::packet::OptionsPacket* Arena::CreateMaybeMessage<::packet::OptionsPacket>(Arena*);
template<> ::packet::Packet* Arena::CreateMaybeMessage<::packet::Packet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace packet {

// ===================================================================

class InitPacket final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:packet.InitPacket) */ {
 public:
  inline InitPacket() : InitPacket(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InitPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitPacket(const InitPacket& from);
  InitPacket(InitPacket&& from) noexcept
    : InitPacket() {
    *this = ::std::move(from);
  }

  inline InitPacket& operator=(const InitPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitPacket& operator=(InitPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitPacket* internal_default_instance() {
    return reinterpret_cast<const InitPacket*>(
               &_InitPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InitPacket& a, InitPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(InitPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InitPacket& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InitPacket& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.InitPacket";
  }
  protected:
  explicit InitPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:packet.InitPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class OptionsPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packet.OptionsPacket) */ {
 public:
  inline OptionsPacket() : OptionsPacket(nullptr) {}
  ~OptionsPacket() override;
  explicit PROTOBUF_CONSTEXPR OptionsPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionsPacket(const OptionsPacket& from);
  OptionsPacket(OptionsPacket&& from) noexcept
    : OptionsPacket() {
    *this = ::std::move(from);
  }

  inline OptionsPacket& operator=(const OptionsPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionsPacket& operator=(OptionsPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionsPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionsPacket* internal_default_instance() {
    return reinterpret_cast<const OptionsPacket*>(
               &_OptionsPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OptionsPacket& a, OptionsPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionsPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionsPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionsPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionsPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptionsPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OptionsPacket& from) {
    OptionsPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionsPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.OptionsPacket";
  }
  protected:
  explicit OptionsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // repeated string options = 1;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  const std::string& options(int index) const;
  std::string* mutable_options(int index);
  void set_options(int index, const std::string& value);
  void set_options(int index, std::string&& value);
  void set_options(int index, const char* value);
  void set_options(int index, const char* value, size_t size);
  std::string* add_options();
  void add_options(const std::string& value);
  void add_options(std::string&& value);
  void add_options(const char* value);
  void add_options(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& options() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_options();
  private:
  const std::string& _internal_options(int index) const;
  std::string* _internal_add_options();
  public:

  // @@protoc_insertion_point(class_scope:packet.OptionsPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> options_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class FileDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packet.FileDetails) */ {
 public:
  inline FileDetails() : FileDetails(nullptr) {}
  ~FileDetails() override;
  explicit PROTOBUF_CONSTEXPR FileDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDetails(const FileDetails& from);
  FileDetails(FileDetails&& from) noexcept
    : FileDetails() {
    *this = ::std::move(from);
  }

  inline FileDetails& operator=(const FileDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDetails& operator=(FileDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDetails* internal_default_instance() {
    return reinterpret_cast<const FileDetails*>(
               &_FileDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileDetails& a, FileDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileDetails& from) {
    FileDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.FileDetails";
  }
  protected:
  explicit FileDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kFilenameFieldNumber = 1,
  };
  // repeated bytes data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // @@protoc_insertion_point(class_scope:packet.FileDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class OptionPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packet.OptionPacket) */ {
 public:
  inline OptionPacket() : OptionPacket(nullptr) {}
  ~OptionPacket() override;
  explicit PROTOBUF_CONSTEXPR OptionPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionPacket(const OptionPacket& from);
  OptionPacket(OptionPacket&& from) noexcept
    : OptionPacket() {
    *this = ::std::move(from);
  }

  inline OptionPacket& operator=(const OptionPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionPacket& operator=(OptionPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionPacket* internal_default_instance() {
    return reinterpret_cast<const OptionPacket*>(
               &_OptionPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OptionPacket& a, OptionPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptionPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OptionPacket& from) {
    OptionPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.OptionPacket";
  }
  protected:
  explicit OptionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .packet.FileDetails details = 2;
  int details_size() const;
  private:
  int _internal_details_size() const;
  public:
  void clear_details();
  ::packet::FileDetails* mutable_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::FileDetails >*
      mutable_details();
  private:
  const ::packet::FileDetails& _internal_details(int index) const;
  ::packet::FileDetails* _internal_add_details();
  public:
  const ::packet::FileDetails& details(int index) const;
  ::packet::FileDetails* add_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::FileDetails >&
      details() const;

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:packet.OptionPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::FileDetails > details_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class LoginPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packet.LoginPacket) */ {
 public:
  inline LoginPacket() : LoginPacket(nullptr) {}
  ~LoginPacket() override;
  explicit PROTOBUF_CONSTEXPR LoginPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginPacket(const LoginPacket& from);
  LoginPacket(LoginPacket&& from) noexcept
    : LoginPacket() {
    *this = ::std::move(from);
  }

  inline LoginPacket& operator=(const LoginPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginPacket& operator=(LoginPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginPacket* internal_default_instance() {
    return reinterpret_cast<const LoginPacket*>(
               &_LoginPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginPacket& a, LoginPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginPacket& from) {
    LoginPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.LoginPacket";
  }
  protected:
  explicit LoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:packet.LoginPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class KeyExchangePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packet.KeyExchangePacket) */ {
 public:
  inline KeyExchangePacket() : KeyExchangePacket(nullptr) {}
  ~KeyExchangePacket() override;
  explicit PROTOBUF_CONSTEXPR KeyExchangePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyExchangePacket(const KeyExchangePacket& from);
  KeyExchangePacket(KeyExchangePacket&& from) noexcept
    : KeyExchangePacket() {
    *this = ::std::move(from);
  }

  inline KeyExchangePacket& operator=(const KeyExchangePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyExchangePacket& operator=(KeyExchangePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyExchangePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyExchangePacket* internal_default_instance() {
    return reinterpret_cast<const KeyExchangePacket*>(
               &_KeyExchangePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(KeyExchangePacket& a, KeyExchangePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyExchangePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyExchangePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyExchangePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyExchangePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyExchangePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyExchangePacket& from) {
    KeyExchangePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyExchangePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.KeyExchangePacket";
  }
  protected:
  explicit KeyExchangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
  };
  // string public_key = 1;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // @@protoc_insertion_point(class_scope:packet.KeyExchangePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class Packet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packet.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  ~Packet() override;
  explicit PROTOBUF_CONSTEXPR Packet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Packet& default_instance() {
    return *internal_default_instance();
  }
  enum PacketTypeCase {
    kInit = 3,
    kLogin = 4,
    kKeyExchange = 5,
    kOptions = 6,
    kOption = 7,
    PACKET_TYPE_NOT_SET = 0,
  };

  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Packet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Packet& from) {
    Packet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 8,
    kPacketIdFieldNumber = 1,
    kPacketSizeFieldNumber = 2,
    kInitFieldNumber = 3,
    kLoginFieldNumber = 4,
    kKeyExchangeFieldNumber = 5,
    kOptionsFieldNumber = 6,
    kOptionFieldNumber = 7,
  };
  // string signature = 8;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // int32 packet_id = 1;
  void clear_packet_id();
  int32_t packet_id() const;
  void set_packet_id(int32_t value);
  private:
  int32_t _internal_packet_id() const;
  void _internal_set_packet_id(int32_t value);
  public:

  // int32 packet_size = 2;
  void clear_packet_size();
  int32_t packet_size() const;
  void set_packet_size(int32_t value);
  private:
  int32_t _internal_packet_size() const;
  void _internal_set_packet_size(int32_t value);
  public:

  // .packet.InitPacket init = 3;
  bool has_init() const;
  private:
  bool _internal_has_init() const;
  public:
  void clear_init();
  const ::packet::InitPacket& init() const;
  PROTOBUF_NODISCARD ::packet::InitPacket* release_init();
  ::packet::InitPacket* mutable_init();
  void set_allocated_init(::packet::InitPacket* init);
  private:
  const ::packet::InitPacket& _internal_init() const;
  ::packet::InitPacket* _internal_mutable_init();
  public:
  void unsafe_arena_set_allocated_init(
      ::packet::InitPacket* init);
  ::packet::InitPacket* unsafe_arena_release_init();

  // .packet.LoginPacket login = 4;
  bool has_login() const;
  private:
  bool _internal_has_login() const;
  public:
  void clear_login();
  const ::packet::LoginPacket& login() const;
  PROTOBUF_NODISCARD ::packet::LoginPacket* release_login();
  ::packet::LoginPacket* mutable_login();
  void set_allocated_login(::packet::LoginPacket* login);
  private:
  const ::packet::LoginPacket& _internal_login() const;
  ::packet::LoginPacket* _internal_mutable_login();
  public:
  void unsafe_arena_set_allocated_login(
      ::packet::LoginPacket* login);
  ::packet::LoginPacket* unsafe_arena_release_login();

  // .packet.KeyExchangePacket key_exchange = 5;
  bool has_key_exchange() const;
  private:
  bool _internal_has_key_exchange() const;
  public:
  void clear_key_exchange();
  const ::packet::KeyExchangePacket& key_exchange() const;
  PROTOBUF_NODISCARD ::packet::KeyExchangePacket* release_key_exchange();
  ::packet::KeyExchangePacket* mutable_key_exchange();
  void set_allocated_key_exchange(::packet::KeyExchangePacket* key_exchange);
  private:
  const ::packet::KeyExchangePacket& _internal_key_exchange() const;
  ::packet::KeyExchangePacket* _internal_mutable_key_exchange();
  public:
  void unsafe_arena_set_allocated_key_exchange(
      ::packet::KeyExchangePacket* key_exchange);
  ::packet::KeyExchangePacket* unsafe_arena_release_key_exchange();

  // .packet.OptionsPacket options = 6;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::packet::OptionsPacket& options() const;
  PROTOBUF_NODISCARD ::packet::OptionsPacket* release_options();
  ::packet::OptionsPacket* mutable_options();
  void set_allocated_options(::packet::OptionsPacket* options);
  private:
  const ::packet::OptionsPacket& _internal_options() const;
  ::packet::OptionsPacket* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::packet::OptionsPacket* options);
  ::packet::OptionsPacket* unsafe_arena_release_options();

  // .packet.OptionPacket option = 7;
  bool has_option() const;
  private:
  bool _internal_has_option() const;
  public:
  void clear_option();
  const ::packet::OptionPacket& option() const;
  PROTOBUF_NODISCARD ::packet::OptionPacket* release_option();
  ::packet::OptionPacket* mutable_option();
  void set_allocated_option(::packet::OptionPacket* option);
  private:
  const ::packet::OptionPacket& _internal_option() const;
  ::packet::OptionPacket* _internal_mutable_option();
  public:
  void unsafe_arena_set_allocated_option(
      ::packet::OptionPacket* option);
  ::packet::OptionPacket* unsafe_arena_release_option();

  void clear_packet_type();
  PacketTypeCase packet_type_case() const;
  // @@protoc_insertion_point(class_scope:packet.Packet)
 private:
  class _Internal;
  void set_has_init();
  void set_has_login();
  void set_has_key_exchange();
  void set_has_options();
  void set_has_option();

  inline bool has_packet_type() const;
  inline void clear_has_packet_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    int32_t packet_id_;
    int32_t packet_size_;
    union PacketTypeUnion {
      constexpr PacketTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::packet::InitPacket* init_;
      ::packet::LoginPacket* login_;
      ::packet::KeyExchangePacket* key_exchange_;
      ::packet::OptionsPacket* options_;
      ::packet::OptionPacket* option_;
    } packet_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_packets_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InitPacket

// -------------------------------------------------------------------

// OptionsPacket

// repeated string options = 1;
inline int OptionsPacket::_internal_options_size() const {
  return _impl_.options_.size();
}
inline int OptionsPacket::options_size() const {
  return _internal_options_size();
}
inline void OptionsPacket::clear_options() {
  _impl_.options_.Clear();
}
inline std::string* OptionsPacket::add_options() {
  std::string* _s = _internal_add_options();
  // @@protoc_insertion_point(field_add_mutable:packet.OptionsPacket.options)
  return _s;
}
inline const std::string& OptionsPacket::_internal_options(int index) const {
  return _impl_.options_.Get(index);
}
inline const std::string& OptionsPacket::options(int index) const {
  // @@protoc_insertion_point(field_get:packet.OptionsPacket.options)
  return _internal_options(index);
}
inline std::string* OptionsPacket::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:packet.OptionsPacket.options)
  return _impl_.options_.Mutable(index);
}
inline void OptionsPacket::set_options(int index, const std::string& value) {
  _impl_.options_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:packet.OptionsPacket.options)
}
inline void OptionsPacket::set_options(int index, std::string&& value) {
  _impl_.options_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:packet.OptionsPacket.options)
}
inline void OptionsPacket::set_options(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.options_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:packet.OptionsPacket.options)
}
inline void OptionsPacket::set_options(int index, const char* value, size_t size) {
  _impl_.options_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:packet.OptionsPacket.options)
}
inline std::string* OptionsPacket::_internal_add_options() {
  return _impl_.options_.Add();
}
inline void OptionsPacket::add_options(const std::string& value) {
  _impl_.options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:packet.OptionsPacket.options)
}
inline void OptionsPacket::add_options(std::string&& value) {
  _impl_.options_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:packet.OptionsPacket.options)
}
inline void OptionsPacket::add_options(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:packet.OptionsPacket.options)
}
inline void OptionsPacket::add_options(const char* value, size_t size) {
  _impl_.options_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:packet.OptionsPacket.options)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OptionsPacket::options() const {
  // @@protoc_insertion_point(field_list:packet.OptionsPacket.options)
  return _impl_.options_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OptionsPacket::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:packet.OptionsPacket.options)
  return &_impl_.options_;
}

// -------------------------------------------------------------------

// FileDetails

// string filename = 1;
inline void FileDetails::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& FileDetails::filename() const {
  // @@protoc_insertion_point(field_get:packet.FileDetails.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDetails::set_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:packet.FileDetails.filename)
}
inline std::string* FileDetails::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:packet.FileDetails.filename)
  return _s;
}
inline const std::string& FileDetails::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void FileDetails::_internal_set_filename(const std::string& value) {
  
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* FileDetails::_internal_mutable_filename() {
  
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* FileDetails::release_filename() {
  // @@protoc_insertion_point(field_release:packet.FileDetails.filename)
  return _impl_.filename_.Release();
}
inline void FileDetails::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:packet.FileDetails.filename)
}

// repeated bytes data = 2;
inline int FileDetails::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int FileDetails::data_size() const {
  return _internal_data_size();
}
inline void FileDetails::clear_data() {
  _impl_.data_.Clear();
}
inline std::string* FileDetails::add_data() {
  std::string* _s = _internal_add_data();
  // @@protoc_insertion_point(field_add_mutable:packet.FileDetails.data)
  return _s;
}
inline const std::string& FileDetails::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const std::string& FileDetails::data(int index) const {
  // @@protoc_insertion_point(field_get:packet.FileDetails.data)
  return _internal_data(index);
}
inline std::string* FileDetails::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:packet.FileDetails.data)
  return _impl_.data_.Mutable(index);
}
inline void FileDetails::set_data(int index, const std::string& value) {
  _impl_.data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:packet.FileDetails.data)
}
inline void FileDetails::set_data(int index, std::string&& value) {
  _impl_.data_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:packet.FileDetails.data)
}
inline void FileDetails::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:packet.FileDetails.data)
}
inline void FileDetails::set_data(int index, const void* value, size_t size) {
  _impl_.data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:packet.FileDetails.data)
}
inline std::string* FileDetails::_internal_add_data() {
  return _impl_.data_.Add();
}
inline void FileDetails::add_data(const std::string& value) {
  _impl_.data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:packet.FileDetails.data)
}
inline void FileDetails::add_data(std::string&& value) {
  _impl_.data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:packet.FileDetails.data)
}
inline void FileDetails::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:packet.FileDetails.data)
}
inline void FileDetails::add_data(const void* value, size_t size) {
  _impl_.data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:packet.FileDetails.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FileDetails::data() const {
  // @@protoc_insertion_point(field_list:packet.FileDetails.data)
  return _impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FileDetails::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:packet.FileDetails.data)
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// OptionPacket

// int32 id = 1;
inline void OptionPacket::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t OptionPacket::_internal_id() const {
  return _impl_.id_;
}
inline int32_t OptionPacket::id() const {
  // @@protoc_insertion_point(field_get:packet.OptionPacket.id)
  return _internal_id();
}
inline void OptionPacket::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void OptionPacket::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:packet.OptionPacket.id)
}

// repeated .packet.FileDetails details = 2;
inline int OptionPacket::_internal_details_size() const {
  return _impl_.details_.size();
}
inline int OptionPacket::details_size() const {
  return _internal_details_size();
}
inline void OptionPacket::clear_details() {
  _impl_.details_.Clear();
}
inline ::packet::FileDetails* OptionPacket::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:packet.OptionPacket.details)
  return _impl_.details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::FileDetails >*
OptionPacket::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:packet.OptionPacket.details)
  return &_impl_.details_;
}
inline const ::packet::FileDetails& OptionPacket::_internal_details(int index) const {
  return _impl_.details_.Get(index);
}
inline const ::packet::FileDetails& OptionPacket::details(int index) const {
  // @@protoc_insertion_point(field_get:packet.OptionPacket.details)
  return _internal_details(index);
}
inline ::packet::FileDetails* OptionPacket::_internal_add_details() {
  return _impl_.details_.Add();
}
inline ::packet::FileDetails* OptionPacket::add_details() {
  ::packet::FileDetails* _add = _internal_add_details();
  // @@protoc_insertion_point(field_add:packet.OptionPacket.details)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::packet::FileDetails >&
OptionPacket::details() const {
  // @@protoc_insertion_point(field_list:packet.OptionPacket.details)
  return _impl_.details_;
}

// -------------------------------------------------------------------

// LoginPacket

// string username = 1;
inline void LoginPacket::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& LoginPacket::username() const {
  // @@protoc_insertion_point(field_get:packet.LoginPacket.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginPacket::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:packet.LoginPacket.username)
}
inline std::string* LoginPacket::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:packet.LoginPacket.username)
  return _s;
}
inline const std::string& LoginPacket::_internal_username() const {
  return _impl_.username_.Get();
}
inline void LoginPacket::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginPacket::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginPacket::release_username() {
  // @@protoc_insertion_point(field_release:packet.LoginPacket.username)
  return _impl_.username_.Release();
}
inline void LoginPacket::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:packet.LoginPacket.username)
}

// string password = 2;
inline void LoginPacket::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& LoginPacket::password() const {
  // @@protoc_insertion_point(field_get:packet.LoginPacket.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginPacket::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:packet.LoginPacket.password)
}
inline std::string* LoginPacket::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:packet.LoginPacket.password)
  return _s;
}
inline const std::string& LoginPacket::_internal_password() const {
  return _impl_.password_.Get();
}
inline void LoginPacket::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginPacket::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginPacket::release_password() {
  // @@protoc_insertion_point(field_release:packet.LoginPacket.password)
  return _impl_.password_.Release();
}
inline void LoginPacket::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:packet.LoginPacket.password)
}

// -------------------------------------------------------------------

// KeyExchangePacket

// string public_key = 1;
inline void KeyExchangePacket::clear_public_key() {
  _impl_.public_key_.ClearToEmpty();
}
inline const std::string& KeyExchangePacket::public_key() const {
  // @@protoc_insertion_point(field_get:packet.KeyExchangePacket.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyExchangePacket::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.public_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:packet.KeyExchangePacket.public_key)
}
inline std::string* KeyExchangePacket::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:packet.KeyExchangePacket.public_key)
  return _s;
}
inline const std::string& KeyExchangePacket::_internal_public_key() const {
  return _impl_.public_key_.Get();
}
inline void KeyExchangePacket::_internal_set_public_key(const std::string& value) {
  
  _impl_.public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyExchangePacket::_internal_mutable_public_key() {
  
  return _impl_.public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyExchangePacket::release_public_key() {
  // @@protoc_insertion_point(field_release:packet.KeyExchangePacket.public_key)
  return _impl_.public_key_.Release();
}
inline void KeyExchangePacket::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  _impl_.public_key_.SetAllocated(public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:packet.KeyExchangePacket.public_key)
}

// -------------------------------------------------------------------

// Packet

// int32 packet_id = 1;
inline void Packet::clear_packet_id() {
  _impl_.packet_id_ = 0;
}
inline int32_t Packet::_internal_packet_id() const {
  return _impl_.packet_id_;
}
inline int32_t Packet::packet_id() const {
  // @@protoc_insertion_point(field_get:packet.Packet.packet_id)
  return _internal_packet_id();
}
inline void Packet::_internal_set_packet_id(int32_t value) {
  
  _impl_.packet_id_ = value;
}
inline void Packet::set_packet_id(int32_t value) {
  _internal_set_packet_id(value);
  // @@protoc_insertion_point(field_set:packet.Packet.packet_id)
}

// int32 packet_size = 2;
inline void Packet::clear_packet_size() {
  _impl_.packet_size_ = 0;
}
inline int32_t Packet::_internal_packet_size() const {
  return _impl_.packet_size_;
}
inline int32_t Packet::packet_size() const {
  // @@protoc_insertion_point(field_get:packet.Packet.packet_size)
  return _internal_packet_size();
}
inline void Packet::_internal_set_packet_size(int32_t value) {
  
  _impl_.packet_size_ = value;
}
inline void Packet::set_packet_size(int32_t value) {
  _internal_set_packet_size(value);
  // @@protoc_insertion_point(field_set:packet.Packet.packet_size)
}

// .packet.InitPacket init = 3;
inline bool Packet::_internal_has_init() const {
  return packet_type_case() == kInit;
}
inline bool Packet::has_init() const {
  return _internal_has_init();
}
inline void Packet::set_has_init() {
  _impl_._oneof_case_[0] = kInit;
}
inline void Packet::clear_init() {
  if (_internal_has_init()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.packet_type_.init_;
    }
    clear_has_packet_type();
  }
}
inline ::packet::InitPacket* Packet::release_init() {
  // @@protoc_insertion_point(field_release:packet.Packet.init)
  if (_internal_has_init()) {
    clear_has_packet_type();
    ::packet::InitPacket* temp = _impl_.packet_type_.init_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.packet_type_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packet::InitPacket& Packet::_internal_init() const {
  return _internal_has_init()
      ? *_impl_.packet_type_.init_
      : reinterpret_cast< ::packet::InitPacket&>(::packet::_InitPacket_default_instance_);
}
inline const ::packet::InitPacket& Packet::init() const {
  // @@protoc_insertion_point(field_get:packet.Packet.init)
  return _internal_init();
}
inline ::packet::InitPacket* Packet::unsafe_arena_release_init() {
  // @@protoc_insertion_point(field_unsafe_arena_release:packet.Packet.init)
  if (_internal_has_init()) {
    clear_has_packet_type();
    ::packet::InitPacket* temp = _impl_.packet_type_.init_;
    _impl_.packet_type_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_init(::packet::InitPacket* init) {
  clear_packet_type();
  if (init) {
    set_has_init();
    _impl_.packet_type_.init_ = init;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:packet.Packet.init)
}
inline ::packet::InitPacket* Packet::_internal_mutable_init() {
  if (!_internal_has_init()) {
    clear_packet_type();
    set_has_init();
    _impl_.packet_type_.init_ = CreateMaybeMessage< ::packet::InitPacket >(GetArenaForAllocation());
  }
  return _impl_.packet_type_.init_;
}
inline ::packet::InitPacket* Packet::mutable_init() {
  ::packet::InitPacket* _msg = _internal_mutable_init();
  // @@protoc_insertion_point(field_mutable:packet.Packet.init)
  return _msg;
}

// .packet.LoginPacket login = 4;
inline bool Packet::_internal_has_login() const {
  return packet_type_case() == kLogin;
}
inline bool Packet::has_login() const {
  return _internal_has_login();
}
inline void Packet::set_has_login() {
  _impl_._oneof_case_[0] = kLogin;
}
inline void Packet::clear_login() {
  if (_internal_has_login()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.packet_type_.login_;
    }
    clear_has_packet_type();
  }
}
inline ::packet::LoginPacket* Packet::release_login() {
  // @@protoc_insertion_point(field_release:packet.Packet.login)
  if (_internal_has_login()) {
    clear_has_packet_type();
    ::packet::LoginPacket* temp = _impl_.packet_type_.login_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.packet_type_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packet::LoginPacket& Packet::_internal_login() const {
  return _internal_has_login()
      ? *_impl_.packet_type_.login_
      : reinterpret_cast< ::packet::LoginPacket&>(::packet::_LoginPacket_default_instance_);
}
inline const ::packet::LoginPacket& Packet::login() const {
  // @@protoc_insertion_point(field_get:packet.Packet.login)
  return _internal_login();
}
inline ::packet::LoginPacket* Packet::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:packet.Packet.login)
  if (_internal_has_login()) {
    clear_has_packet_type();
    ::packet::LoginPacket* temp = _impl_.packet_type_.login_;
    _impl_.packet_type_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_login(::packet::LoginPacket* login) {
  clear_packet_type();
  if (login) {
    set_has_login();
    _impl_.packet_type_.login_ = login;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:packet.Packet.login)
}
inline ::packet::LoginPacket* Packet::_internal_mutable_login() {
  if (!_internal_has_login()) {
    clear_packet_type();
    set_has_login();
    _impl_.packet_type_.login_ = CreateMaybeMessage< ::packet::LoginPacket >(GetArenaForAllocation());
  }
  return _impl_.packet_type_.login_;
}
inline ::packet::LoginPacket* Packet::mutable_login() {
  ::packet::LoginPacket* _msg = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:packet.Packet.login)
  return _msg;
}

// .packet.KeyExchangePacket key_exchange = 5;
inline bool Packet::_internal_has_key_exchange() const {
  return packet_type_case() == kKeyExchange;
}
inline bool Packet::has_key_exchange() const {
  return _internal_has_key_exchange();
}
inline void Packet::set_has_key_exchange() {
  _impl_._oneof_case_[0] = kKeyExchange;
}
inline void Packet::clear_key_exchange() {
  if (_internal_has_key_exchange()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.packet_type_.key_exchange_;
    }
    clear_has_packet_type();
  }
}
inline ::packet::KeyExchangePacket* Packet::release_key_exchange() {
  // @@protoc_insertion_point(field_release:packet.Packet.key_exchange)
  if (_internal_has_key_exchange()) {
    clear_has_packet_type();
    ::packet::KeyExchangePacket* temp = _impl_.packet_type_.key_exchange_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.packet_type_.key_exchange_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packet::KeyExchangePacket& Packet::_internal_key_exchange() const {
  return _internal_has_key_exchange()
      ? *_impl_.packet_type_.key_exchange_
      : reinterpret_cast< ::packet::KeyExchangePacket&>(::packet::_KeyExchangePacket_default_instance_);
}
inline const ::packet::KeyExchangePacket& Packet::key_exchange() const {
  // @@protoc_insertion_point(field_get:packet.Packet.key_exchange)
  return _internal_key_exchange();
}
inline ::packet::KeyExchangePacket* Packet::unsafe_arena_release_key_exchange() {
  // @@protoc_insertion_point(field_unsafe_arena_release:packet.Packet.key_exchange)
  if (_internal_has_key_exchange()) {
    clear_has_packet_type();
    ::packet::KeyExchangePacket* temp = _impl_.packet_type_.key_exchange_;
    _impl_.packet_type_.key_exchange_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_key_exchange(::packet::KeyExchangePacket* key_exchange) {
  clear_packet_type();
  if (key_exchange) {
    set_has_key_exchange();
    _impl_.packet_type_.key_exchange_ = key_exchange;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:packet.Packet.key_exchange)
}
inline ::packet::KeyExchangePacket* Packet::_internal_mutable_key_exchange() {
  if (!_internal_has_key_exchange()) {
    clear_packet_type();
    set_has_key_exchange();
    _impl_.packet_type_.key_exchange_ = CreateMaybeMessage< ::packet::KeyExchangePacket >(GetArenaForAllocation());
  }
  return _impl_.packet_type_.key_exchange_;
}
inline ::packet::KeyExchangePacket* Packet::mutable_key_exchange() {
  ::packet::KeyExchangePacket* _msg = _internal_mutable_key_exchange();
  // @@protoc_insertion_point(field_mutable:packet.Packet.key_exchange)
  return _msg;
}

// .packet.OptionsPacket options = 6;
inline bool Packet::_internal_has_options() const {
  return packet_type_case() == kOptions;
}
inline bool Packet::has_options() const {
  return _internal_has_options();
}
inline void Packet::set_has_options() {
  _impl_._oneof_case_[0] = kOptions;
}
inline void Packet::clear_options() {
  if (_internal_has_options()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.packet_type_.options_;
    }
    clear_has_packet_type();
  }
}
inline ::packet::OptionsPacket* Packet::release_options() {
  // @@protoc_insertion_point(field_release:packet.Packet.options)
  if (_internal_has_options()) {
    clear_has_packet_type();
    ::packet::OptionsPacket* temp = _impl_.packet_type_.options_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.packet_type_.options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packet::OptionsPacket& Packet::_internal_options() const {
  return _internal_has_options()
      ? *_impl_.packet_type_.options_
      : reinterpret_cast< ::packet::OptionsPacket&>(::packet::_OptionsPacket_default_instance_);
}
inline const ::packet::OptionsPacket& Packet::options() const {
  // @@protoc_insertion_point(field_get:packet.Packet.options)
  return _internal_options();
}
inline ::packet::OptionsPacket* Packet::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:packet.Packet.options)
  if (_internal_has_options()) {
    clear_has_packet_type();
    ::packet::OptionsPacket* temp = _impl_.packet_type_.options_;
    _impl_.packet_type_.options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_options(::packet::OptionsPacket* options) {
  clear_packet_type();
  if (options) {
    set_has_options();
    _impl_.packet_type_.options_ = options;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:packet.Packet.options)
}
inline ::packet::OptionsPacket* Packet::_internal_mutable_options() {
  if (!_internal_has_options()) {
    clear_packet_type();
    set_has_options();
    _impl_.packet_type_.options_ = CreateMaybeMessage< ::packet::OptionsPacket >(GetArenaForAllocation());
  }
  return _impl_.packet_type_.options_;
}
inline ::packet::OptionsPacket* Packet::mutable_options() {
  ::packet::OptionsPacket* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:packet.Packet.options)
  return _msg;
}

// .packet.OptionPacket option = 7;
inline bool Packet::_internal_has_option() const {
  return packet_type_case() == kOption;
}
inline bool Packet::has_option() const {
  return _internal_has_option();
}
inline void Packet::set_has_option() {
  _impl_._oneof_case_[0] = kOption;
}
inline void Packet::clear_option() {
  if (_internal_has_option()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.packet_type_.option_;
    }
    clear_has_packet_type();
  }
}
inline ::packet::OptionPacket* Packet::release_option() {
  // @@protoc_insertion_point(field_release:packet.Packet.option)
  if (_internal_has_option()) {
    clear_has_packet_type();
    ::packet::OptionPacket* temp = _impl_.packet_type_.option_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.packet_type_.option_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packet::OptionPacket& Packet::_internal_option() const {
  return _internal_has_option()
      ? *_impl_.packet_type_.option_
      : reinterpret_cast< ::packet::OptionPacket&>(::packet::_OptionPacket_default_instance_);
}
inline const ::packet::OptionPacket& Packet::option() const {
  // @@protoc_insertion_point(field_get:packet.Packet.option)
  return _internal_option();
}
inline ::packet::OptionPacket* Packet::unsafe_arena_release_option() {
  // @@protoc_insertion_point(field_unsafe_arena_release:packet.Packet.option)
  if (_internal_has_option()) {
    clear_has_packet_type();
    ::packet::OptionPacket* temp = _impl_.packet_type_.option_;
    _impl_.packet_type_.option_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_option(::packet::OptionPacket* option) {
  clear_packet_type();
  if (option) {
    set_has_option();
    _impl_.packet_type_.option_ = option;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:packet.Packet.option)
}
inline ::packet::OptionPacket* Packet::_internal_mutable_option() {
  if (!_internal_has_option()) {
    clear_packet_type();
    set_has_option();
    _impl_.packet_type_.option_ = CreateMaybeMessage< ::packet::OptionPacket >(GetArenaForAllocation());
  }
  return _impl_.packet_type_.option_;
}
inline ::packet::OptionPacket* Packet::mutable_option() {
  ::packet::OptionPacket* _msg = _internal_mutable_option();
  // @@protoc_insertion_point(field_mutable:packet.Packet.option)
  return _msg;
}

// string signature = 8;
inline void Packet::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& Packet::signature() const {
  // @@protoc_insertion_point(field_get:packet.Packet.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Packet::set_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:packet.Packet.signature)
}
inline std::string* Packet::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:packet.Packet.signature)
  return _s;
}
inline const std::string& Packet::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void Packet::_internal_set_signature(const std::string& value) {
  
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Packet::_internal_mutable_signature() {
  
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* Packet::release_signature() {
  // @@protoc_insertion_point(field_release:packet.Packet.signature)
  return _impl_.signature_.Release();
}
inline void Packet::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:packet.Packet.signature)
}

inline bool Packet::has_packet_type() const {
  return packet_type_case() != PACKET_TYPE_NOT_SET;
}
inline void Packet::clear_has_packet_type() {
  _impl_._oneof_case_[0] = PACKET_TYPE_NOT_SET;
}
inline Packet::PacketTypeCase Packet::packet_type_case() const {
  return Packet::PacketTypeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace packet

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packets_2eproto
