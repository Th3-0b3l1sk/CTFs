// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packets.proto

#include "packets.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace packet {
PROTOBUF_CONSTEXPR InitPacket::InitPacket(
    ::_pbi::ConstantInitialized) {}
struct InitPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitPacketDefaultTypeInternal() {}
  union {
    InitPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitPacketDefaultTypeInternal _InitPacket_default_instance_;
PROTOBUF_CONSTEXPR OptionsPacket::OptionsPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.options_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OptionsPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionsPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionsPacketDefaultTypeInternal() {}
  union {
    OptionsPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionsPacketDefaultTypeInternal _OptionsPacket_default_instance_;
PROTOBUF_CONSTEXPR FileDetails::FileDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDetailsDefaultTypeInternal() {}
  union {
    FileDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDetailsDefaultTypeInternal _FileDetails_default_instance_;
PROTOBUF_CONSTEXPR OptionPacket::OptionPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.details_)*/{}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OptionPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionPacketDefaultTypeInternal() {}
  union {
    OptionPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionPacketDefaultTypeInternal _OptionPacket_default_instance_;
PROTOBUF_CONSTEXPR LoginPacket::LoginPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginPacketDefaultTypeInternal() {}
  union {
    LoginPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginPacketDefaultTypeInternal _LoginPacket_default_instance_;
PROTOBUF_CONSTEXPR KeyExchangePacket::KeyExchangePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.public_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyExchangePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyExchangePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyExchangePacketDefaultTypeInternal() {}
  union {
    KeyExchangePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyExchangePacketDefaultTypeInternal _KeyExchangePacket_default_instance_;
PROTOBUF_CONSTEXPR Packet::Packet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.packet_id_)*/0
  , /*decltype(_impl_.packet_size_)*/0
  , /*decltype(_impl_.packet_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketDefaultTypeInternal() {}
  union {
    Packet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketDefaultTypeInternal _Packet_default_instance_;
}  // namespace packet
static ::_pb::Metadata file_level_metadata_packets_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_packets_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_packets_2eproto = nullptr;

const uint32_t TableStruct_packets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packet::InitPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packet::OptionsPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::packet::OptionsPacket, _impl_.options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packet::FileDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::packet::FileDetails, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::packet::FileDetails, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packet::OptionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::packet::OptionPacket, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::packet::OptionPacket, _impl_.details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packet::LoginPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::packet::LoginPacket, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::packet::LoginPacket, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packet::KeyExchangePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::packet::KeyExchangePacket, _impl_.public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packet::Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::packet::Packet, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::packet::Packet, _impl_.packet_id_),
  PROTOBUF_FIELD_OFFSET(::packet::Packet, _impl_.packet_size_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::packet::Packet, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::packet::Packet, _impl_.packet_type_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::packet::InitPacket)},
  { 6, -1, -1, sizeof(::packet::OptionsPacket)},
  { 13, -1, -1, sizeof(::packet::FileDetails)},
  { 21, -1, -1, sizeof(::packet::OptionPacket)},
  { 29, -1, -1, sizeof(::packet::LoginPacket)},
  { 37, -1, -1, sizeof(::packet::KeyExchangePacket)},
  { 44, -1, -1, sizeof(::packet::Packet)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::packet::_InitPacket_default_instance_._instance,
  &::packet::_OptionsPacket_default_instance_._instance,
  &::packet::_FileDetails_default_instance_._instance,
  &::packet::_OptionPacket_default_instance_._instance,
  &::packet::_LoginPacket_default_instance_._instance,
  &::packet::_KeyExchangePacket_default_instance_._instance,
  &::packet::_Packet_default_instance_._instance,
};

const char descriptor_table_protodef_packets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpackets.proto\022\006packet\"\014\n\nInitPacket\" \n"
  "\rOptionsPacket\022\017\n\007options\030\001 \003(\t\"-\n\013FileD"
  "etails\022\020\n\010filename\030\001 \001(\t\022\014\n\004data\030\002 \003(\014\"@"
  "\n\014OptionPacket\022\n\n\002id\030\001 \001(\005\022$\n\007details\030\002 "
  "\003(\0132\023.packet.FileDetails\"1\n\013LoginPacket\022"
  "\020\n\010username\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"\'\n\021K"
  "eyExchangePacket\022\022\n\npublic_key\030\001 \001(\t\"\241\002\n"
  "\006Packet\022\021\n\tpacket_id\030\001 \001(\005\022\023\n\013packet_siz"
  "e\030\002 \001(\005\022\"\n\004init\030\003 \001(\0132\022.packet.InitPacke"
  "tH\000\022$\n\005login\030\004 \001(\0132\023.packet.LoginPacketH"
  "\000\0221\n\014key_exchange\030\005 \001(\0132\031.packet.KeyExch"
  "angePacketH\000\022(\n\007options\030\006 \001(\0132\025.packet.O"
  "ptionsPacketH\000\022&\n\006option\030\007 \001(\0132\024.packet."
  "OptionPacketH\000\022\021\n\tsignature\030\010 \001(\tB\r\n\013pac"
  "ket_typeb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_packets_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_packets_2eproto = {
    false, false, 576, descriptor_table_protodef_packets_2eproto,
    "packets.proto",
    &descriptor_table_packets_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_packets_2eproto::offsets,
    file_level_metadata_packets_2eproto, file_level_enum_descriptors_packets_2eproto,
    file_level_service_descriptors_packets_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_packets_2eproto_getter() {
  return &descriptor_table_packets_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_packets_2eproto(&descriptor_table_packets_2eproto);
namespace packet {

// ===================================================================

class InitPacket::_Internal {
 public:
};

InitPacket::InitPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:packet.InitPacket)
}
InitPacket::InitPacket(const InitPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  InitPacket* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:packet.InitPacket)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitPacket::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InitPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[0]);
}

// ===================================================================

class OptionsPacket::_Internal {
 public:
};

OptionsPacket::OptionsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:packet.OptionsPacket)
}
OptionsPacket::OptionsPacket(const OptionsPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptionsPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){from._impl_.options_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:packet.OptionsPacket)
}

inline void OptionsPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OptionsPacket::~OptionsPacket() {
  // @@protoc_insertion_point(destructor:packet.OptionsPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptionsPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.options_.~RepeatedPtrField();
}

void OptionsPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptionsPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.OptionsPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.options_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionsPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_options();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "packet.OptionsPacket.options"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptionsPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.OptionsPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string options = 1;
  for (int i = 0, n = this->_internal_options_size(); i < n; i++) {
    const auto& s = this->_internal_options(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packet.OptionsPacket.options");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.OptionsPacket)
  return target;
}

size_t OptionsPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.OptionsPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string options = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.options_.size());
  for (int i = 0, n = _impl_.options_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.options_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionsPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptionsPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionsPacket::GetClassData() const { return &_class_data_; }


void OptionsPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptionsPacket*>(&to_msg);
  auto& from = static_cast<const OptionsPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.OptionsPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.options_.MergeFrom(from._impl_.options_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptionsPacket::CopyFrom(const OptionsPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.OptionsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionsPacket::IsInitialized() const {
  return true;
}

void OptionsPacket::InternalSwap(OptionsPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.options_.InternalSwap(&other->_impl_.options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionsPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[1]);
}

// ===================================================================

class FileDetails::_Internal {
 public:
};

FileDetails::FileDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:packet.FileDetails)
}
FileDetails::FileDetails(const FileDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.filename_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:packet.FileDetails)
}

inline void FileDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.filename_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileDetails::~FileDetails() {
  // @@protoc_insertion_point(destructor:packet.FileDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
  _impl_.filename_.Destroy();
}

void FileDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.FileDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.filename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "packet.FileDetails.filename"));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.FileDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packet.FileDetails.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // repeated bytes data = 2;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.FileDetails)
  return target;
}

size_t FileDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.FileDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.data_.size());
  for (int i = 0, n = _impl_.data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.data_.Get(i));
  }

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileDetails::GetClassData() const { return &_class_data_; }


void FileDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileDetails*>(&to_msg);
  auto& from = static_cast<const FileDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.FileDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileDetails::CopyFrom(const FileDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.FileDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileDetails::IsInitialized() const {
  return true;
}

void FileDetails::InternalSwap(FileDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FileDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[2]);
}

// ===================================================================

class OptionPacket::_Internal {
 public:
};

OptionPacket::OptionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:packet.OptionPacket)
}
OptionPacket::OptionPacket(const OptionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptionPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.details_){from._impl_.details_}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:packet.OptionPacket)
}

inline void OptionPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.details_){arena}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OptionPacket::~OptionPacket() {
  // @@protoc_insertion_point(destructor:packet.OptionPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptionPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.details_.~RepeatedPtrField();
}

void OptionPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.OptionPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.details_.Clear();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .packet.FileDetails details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptionPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.OptionPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .packet.FileDetails details = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.OptionPacket)
  return target;
}

size_t OptionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.OptionPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .packet.FileDetails details = 2;
  total_size += 1UL * this->_internal_details_size();
  for (const auto& msg : this->_impl_.details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptionPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionPacket::GetClassData() const { return &_class_data_; }


void OptionPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptionPacket*>(&to_msg);
  auto& from = static_cast<const OptionPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.OptionPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.details_.MergeFrom(from._impl_.details_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptionPacket::CopyFrom(const OptionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.OptionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionPacket::IsInitialized() const {
  return true;
}

void OptionPacket::InternalSwap(OptionPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.details_.InternalSwap(&other->_impl_.details_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[3]);
}

// ===================================================================

class LoginPacket::_Internal {
 public:
};

LoginPacket::LoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:packet.LoginPacket)
}
LoginPacket::LoginPacket(const LoginPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:packet.LoginPacket)
}

inline void LoginPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginPacket::~LoginPacket() {
  // @@protoc_insertion_point(destructor:packet.LoginPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
}

void LoginPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.LoginPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "packet.LoginPacket.username"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "packet.LoginPacket.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.LoginPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packet.LoginPacket.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packet.LoginPacket.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.LoginPacket)
  return target;
}

size_t LoginPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.LoginPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginPacket::GetClassData() const { return &_class_data_; }


void LoginPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginPacket*>(&to_msg);
  auto& from = static_cast<const LoginPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.LoginPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginPacket::CopyFrom(const LoginPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.LoginPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginPacket::IsInitialized() const {
  return true;
}

void LoginPacket::InternalSwap(LoginPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[4]);
}

// ===================================================================

class KeyExchangePacket::_Internal {
 public:
};

KeyExchangePacket::KeyExchangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:packet.KeyExchangePacket)
}
KeyExchangePacket::KeyExchangePacket(const KeyExchangePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyExchangePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    _this->_impl_.public_key_.Set(from._internal_public_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:packet.KeyExchangePacket)
}

inline void KeyExchangePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyExchangePacket::~KeyExchangePacket() {
  // @@protoc_insertion_point(destructor:packet.KeyExchangePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyExchangePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.public_key_.Destroy();
}

void KeyExchangePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyExchangePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.KeyExchangePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyExchangePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "packet.KeyExchangePacket.public_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyExchangePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.KeyExchangePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string public_key = 1;
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packet.KeyExchangePacket.public_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.KeyExchangePacket)
  return target;
}

size_t KeyExchangePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.KeyExchangePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_key = 1;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyExchangePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyExchangePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyExchangePacket::GetClassData() const { return &_class_data_; }


void KeyExchangePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyExchangePacket*>(&to_msg);
  auto& from = static_cast<const KeyExchangePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.KeyExchangePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _this->_internal_set_public_key(from._internal_public_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyExchangePacket::CopyFrom(const KeyExchangePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.KeyExchangePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyExchangePacket::IsInitialized() const {
  return true;
}

void KeyExchangePacket::InternalSwap(KeyExchangePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_key_, lhs_arena,
      &other->_impl_.public_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyExchangePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[5]);
}

// ===================================================================

class Packet::_Internal {
 public:
  static const ::packet::InitPacket& init(const Packet* msg);
  static const ::packet::LoginPacket& login(const Packet* msg);
  static const ::packet::KeyExchangePacket& key_exchange(const Packet* msg);
  static const ::packet::OptionsPacket& options(const Packet* msg);
  static const ::packet::OptionPacket& option(const Packet* msg);
};

const ::packet::InitPacket&
Packet::_Internal::init(const Packet* msg) {
  return *msg->_impl_.packet_type_.init_;
}
const ::packet::LoginPacket&
Packet::_Internal::login(const Packet* msg) {
  return *msg->_impl_.packet_type_.login_;
}
const ::packet::KeyExchangePacket&
Packet::_Internal::key_exchange(const Packet* msg) {
  return *msg->_impl_.packet_type_.key_exchange_;
}
const ::packet::OptionsPacket&
Packet::_Internal::options(const Packet* msg) {
  return *msg->_impl_.packet_type_.options_;
}
const ::packet::OptionPacket&
Packet::_Internal::option(const Packet* msg) {
  return *msg->_impl_.packet_type_.option_;
}
void Packet::set_allocated_init(::packet::InitPacket* init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet_type();
  if (init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(init);
    if (message_arena != submessage_arena) {
      init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init, submessage_arena);
    }
    set_has_init();
    _impl_.packet_type_.init_ = init;
  }
  // @@protoc_insertion_point(field_set_allocated:packet.Packet.init)
}
void Packet::set_allocated_login(::packet::LoginPacket* login) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet_type();
  if (login) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login);
    if (message_arena != submessage_arena) {
      login = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login, submessage_arena);
    }
    set_has_login();
    _impl_.packet_type_.login_ = login;
  }
  // @@protoc_insertion_point(field_set_allocated:packet.Packet.login)
}
void Packet::set_allocated_key_exchange(::packet::KeyExchangePacket* key_exchange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet_type();
  if (key_exchange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(key_exchange);
    if (message_arena != submessage_arena) {
      key_exchange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_exchange, submessage_arena);
    }
    set_has_key_exchange();
    _impl_.packet_type_.key_exchange_ = key_exchange;
  }
  // @@protoc_insertion_point(field_set_allocated:packet.Packet.key_exchange)
}
void Packet::set_allocated_options(::packet::OptionsPacket* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet_type();
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    set_has_options();
    _impl_.packet_type_.options_ = options;
  }
  // @@protoc_insertion_point(field_set_allocated:packet.Packet.options)
}
void Packet::set_allocated_option(::packet::OptionPacket* option) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet_type();
  if (option) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(option);
    if (message_arena != submessage_arena) {
      option = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, option, submessage_arena);
    }
    set_has_option();
    _impl_.packet_type_.option_ = option;
  }
  // @@protoc_insertion_point(field_set_allocated:packet.Packet.option)
}
Packet::Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:packet.Packet)
}
Packet::Packet(const Packet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Packet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_){}
    , decltype(_impl_.packet_id_){}
    , decltype(_impl_.packet_size_){}
    , decltype(_impl_.packet_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.packet_id_, &from._impl_.packet_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.packet_size_) -
    reinterpret_cast<char*>(&_impl_.packet_id_)) + sizeof(_impl_.packet_size_));
  clear_has_packet_type();
  switch (from.packet_type_case()) {
    case kInit: {
      _this->_internal_mutable_init()->::packet::InitPacket::MergeFrom(
          from._internal_init());
      break;
    }
    case kLogin: {
      _this->_internal_mutable_login()->::packet::LoginPacket::MergeFrom(
          from._internal_login());
      break;
    }
    case kKeyExchange: {
      _this->_internal_mutable_key_exchange()->::packet::KeyExchangePacket::MergeFrom(
          from._internal_key_exchange());
      break;
    }
    case kOptions: {
      _this->_internal_mutable_options()->::packet::OptionsPacket::MergeFrom(
          from._internal_options());
      break;
    }
    case kOption: {
      _this->_internal_mutable_option()->::packet::OptionPacket::MergeFrom(
          from._internal_option());
      break;
    }
    case PACKET_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:packet.Packet)
}

inline void Packet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_){}
    , decltype(_impl_.packet_id_){0}
    , decltype(_impl_.packet_size_){0}
    , decltype(_impl_.packet_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_packet_type();
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:packet.Packet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Packet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signature_.Destroy();
  if (has_packet_type()) {
    clear_packet_type();
  }
}

void Packet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Packet::clear_packet_type() {
// @@protoc_insertion_point(one_of_clear_start:packet.Packet)
  switch (packet_type_case()) {
    case kInit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_type_.init_;
      }
      break;
    }
    case kLogin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_type_.login_;
      }
      break;
    }
    case kKeyExchange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_type_.key_exchange_;
      }
      break;
    }
    case kOptions: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_type_.options_;
      }
      break;
    }
    case kOption: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_type_.option_;
      }
      break;
    }
    case PACKET_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PACKET_TYPE_NOT_SET;
}


void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.Packet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signature_.ClearToEmpty();
  ::memset(&_impl_.packet_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.packet_size_) -
      reinterpret_cast<char*>(&_impl_.packet_id_)) + sizeof(_impl_.packet_size_));
  clear_packet_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Packet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 packet_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.packet_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 packet_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.packet_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .packet.InitPacket init = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_init(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .packet.LoginPacket login = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_login(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .packet.KeyExchangePacket key_exchange = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_exchange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .packet.OptionsPacket options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .packet.OptionPacket option = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_option(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string signature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "packet.Packet.signature"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Packet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.Packet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 packet_id = 1;
  if (this->_internal_packet_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_packet_id(), target);
  }

  // int32 packet_size = 2;
  if (this->_internal_packet_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_packet_size(), target);
  }

  // .packet.InitPacket init = 3;
  if (_internal_has_init()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::init(this),
        _Internal::init(this).GetCachedSize(), target, stream);
  }

  // .packet.LoginPacket login = 4;
  if (_internal_has_login()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::login(this),
        _Internal::login(this).GetCachedSize(), target, stream);
  }

  // .packet.KeyExchangePacket key_exchange = 5;
  if (_internal_has_key_exchange()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::key_exchange(this),
        _Internal::key_exchange(this).GetCachedSize(), target, stream);
  }

  // .packet.OptionsPacket options = 6;
  if (_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // .packet.OptionPacket option = 7;
  if (_internal_has_option()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::option(this),
        _Internal::option(this).GetCachedSize(), target, stream);
  }

  // string signature = 8;
  if (!this->_internal_signature().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packet.Packet.signature");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.Packet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signature = 8;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  // int32 packet_id = 1;
  if (this->_internal_packet_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_packet_id());
  }

  // int32 packet_size = 2;
  if (this->_internal_packet_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_packet_size());
  }

  switch (packet_type_case()) {
    // .packet.InitPacket init = 3;
    case kInit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_type_.init_);
      break;
    }
    // .packet.LoginPacket login = 4;
    case kLogin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_type_.login_);
      break;
    }
    // .packet.KeyExchangePacket key_exchange = 5;
    case kKeyExchange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_type_.key_exchange_);
      break;
    }
    // .packet.OptionsPacket options = 6;
    case kOptions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_type_.options_);
      break;
    }
    // .packet.OptionPacket option = 7;
    case kOption: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_type_.option_);
      break;
    }
    case PACKET_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Packet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Packet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Packet::GetClassData() const { return &_class_data_; }


void Packet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Packet*>(&to_msg);
  auto& from = static_cast<const Packet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.Packet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if (from._internal_packet_id() != 0) {
    _this->_internal_set_packet_id(from._internal_packet_id());
  }
  if (from._internal_packet_size() != 0) {
    _this->_internal_set_packet_size(from._internal_packet_size());
  }
  switch (from.packet_type_case()) {
    case kInit: {
      _this->_internal_mutable_init()->::packet::InitPacket::MergeFrom(
          from._internal_init());
      break;
    }
    case kLogin: {
      _this->_internal_mutable_login()->::packet::LoginPacket::MergeFrom(
          from._internal_login());
      break;
    }
    case kKeyExchange: {
      _this->_internal_mutable_key_exchange()->::packet::KeyExchangePacket::MergeFrom(
          from._internal_key_exchange());
      break;
    }
    case kOptions: {
      _this->_internal_mutable_options()->::packet::OptionsPacket::MergeFrom(
          from._internal_options());
      break;
    }
    case kOption: {
      _this->_internal_mutable_option()->::packet::OptionPacket::MergeFrom(
          from._internal_option());
      break;
    }
    case PACKET_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::InternalSwap(Packet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Packet, _impl_.packet_size_)
      + sizeof(Packet::_impl_.packet_size_)
      - PROTOBUF_FIELD_OFFSET(Packet, _impl_.packet_id_)>(
          reinterpret_cast<char*>(&_impl_.packet_id_),
          reinterpret_cast<char*>(&other->_impl_.packet_id_));
  swap(_impl_.packet_type_, other->_impl_.packet_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Packet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_packets_2eproto_getter, &descriptor_table_packets_2eproto_once,
      file_level_metadata_packets_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace packet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::packet::InitPacket*
Arena::CreateMaybeMessage< ::packet::InitPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::packet::InitPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::packet::OptionsPacket*
Arena::CreateMaybeMessage< ::packet::OptionsPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::packet::OptionsPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::packet::FileDetails*
Arena::CreateMaybeMessage< ::packet::FileDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::packet::FileDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::packet::OptionPacket*
Arena::CreateMaybeMessage< ::packet::OptionPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::packet::OptionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::packet::LoginPacket*
Arena::CreateMaybeMessage< ::packet::LoginPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::packet::LoginPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::packet::KeyExchangePacket*
Arena::CreateMaybeMessage< ::packet::KeyExchangePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::packet::KeyExchangePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::packet::Packet*
Arena::CreateMaybeMessage< ::packet::Packet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::packet::Packet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
