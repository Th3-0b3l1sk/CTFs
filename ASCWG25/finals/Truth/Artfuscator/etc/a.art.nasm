section .data

reg_a: dd 0
reg_b: dd 0
reg_c: dd 0
reg_d: dd 0
reg_bp: dd 0
reg_sp: dd 0
reg_pc: dd 0

putc: dd 0
mem:
 dd 0x800000
 dd 0x400000
 dd 0x200000
 dd 0x100000
 dd 0x80000
 dd 0x40000
 dd 0x20000
 dd 0x10000
 dd 0x8000
 dd 0x4000
 dd 0x2000
 dd 0x1000
 dd 0x800
 dd 0x400
 dd 0x200
 dd 0x100
 dd 0x80
 dd 0x40
 dd 0x20
 dd 0x10
 dd 0x8
 dd 0x4
 dd 0x2
 dd 0x1
 dd 0x6e
 dd 0x6f
 dd 0x20
 dd 0x6d
 dd 0x65
 dd 0x6d
 dd 0x6f
 dd 0x72
 dd 0x79
 dd 0x21
 dd 0xa
 dd 0x0
 dd 0x0
 dd 0x1
 dd 0x2
 dd 0x3
 dd 0x4
 dd 0x5
 dd 0x6
 dd 0x7
 dd 0x8
 dd 0x9
 dd 0xa
 dd 0xb
 dd 0xc
 dd 0xd
 dd 0xe
 dd 0xf
 dd 0x10
 dd 0x11
 dd 0x12
 dd 0x13
 dd 0x14
 dd 0x15
 dd 0x16
 dd 0x17
 dd 0x18
 dd 0x19
 dd 0x1a
 dd 0x1b
 dd 0x1c
 dd 0x1d
 dd 0x1e
 dd 0x1f
 dd 0x20
 dd 0x21
 dd 0x22
 dd 0x23
 dd 0x24
 dd 0x25
 dd 0x26
 dd 0x27
 dd 0x28
 dd 0x29
 dd 0x2a
 dd 0x2b
 dd 0x2c
 dd 0x2d
 dd 0x2e
 dd 0x2f
 dd 0x30
 dd 0x31
 dd 0x32
 dd 0x33
 dd 0x34
 dd 0x35
 dd 0x36
 dd 0x37
 dd 0x38
 dd 0x39
 dd 0x3a
 dd 0x3b
 dd 0x3c
 dd 0x3d
 dd 0x3e
 dd 0x3f
 dd 0x40
 dd 0x61
 dd 0x62
 dd 0x63
 dd 0x64
 dd 0x65
 dd 0x66
 dd 0x67
 dd 0x68
 dd 0x69
 dd 0x6a
 dd 0x6b
 dd 0x6c
 dd 0x6d
 dd 0x6e
 dd 0x6f
 dd 0x70
 dd 0x71
 dd 0x72
 dd 0x73
 dd 0x74
 dd 0x75
 dd 0x76
 dd 0x77
 dd 0x78
 dd 0x79
 dd 0x7a
 dd 0x5b
 dd 0x5c
 dd 0x5d
 dd 0x5e
 dd 0x5f
 dd 0x60
 dd 0x61
 dd 0x62
 dd 0x63
 dd 0x64
 dd 0x65
 dd 0x66
 dd 0x67
 dd 0x68
 dd 0x69
 dd 0x6a
 dd 0x6b
 dd 0x6c
 dd 0x6d
 dd 0x6e
 dd 0x6f
 dd 0x70
 dd 0x71
 dd 0x72
 dd 0x73
 dd 0x74
 dd 0x75
 dd 0x76
 dd 0x77
 dd 0x78
 dd 0x79
 dd 0x7a
 dd 0x7b
 dd 0x7c
 dd 0x7d
 dd 0x7e
 dd 0x7f
 dd 0xffff80
 dd 0xffff81
 dd 0xffff82
 dd 0xffff83
 dd 0xffff84
 dd 0xffff85
 dd 0xffff86
 dd 0xffff87
 dd 0xffff88
 dd 0xffff89
 dd 0xffff8a
 dd 0xffff8b
 dd 0xffff8c
 dd 0xffff8d
 dd 0xffff8e
 dd 0xffff8f
 dd 0xffff90
 dd 0xffff91
 dd 0xffff92
 dd 0xffff93
 dd 0xffff94
 dd 0xffff95
 dd 0xffff96
 dd 0xffff97
 dd 0xffff98
 dd 0xffff99
 dd 0xffff9a
 dd 0xffff9b
 dd 0xffff9c
 dd 0xffff9d
 dd 0xffff9e
 dd 0xffff9f
 dd 0xffffa0
 dd 0xffffa1
 dd 0xffffa2
 dd 0xffffa3
 dd 0xffffa4
 dd 0xffffa5
 dd 0xffffa6
 dd 0xffffa7
 dd 0xffffa8
 dd 0xffffa9
 dd 0xffffaa
 dd 0xffffab
 dd 0xffffac
 dd 0xffffad
 dd 0xffffae
 dd 0xffffaf
 dd 0xffffb0
 dd 0xffffb1
 dd 0xffffb2
 dd 0xffffb3
 dd 0xffffb4
 dd 0xffffb5
 dd 0xffffb6
 dd 0xffffb7
 dd 0xffffb8
 dd 0xffffb9
 dd 0xffffba
 dd 0xffffbb
 dd 0xffffbc
 dd 0xffffbd
 dd 0xffffbe
 dd 0xffffbf
 dd 0xffffc0
 dd 0xffffc1
 dd 0xffffc2
 dd 0xffffc3
 dd 0xffffc4
 dd 0xffffc5
 dd 0xffffc6
 dd 0xffffc7
 dd 0xffffc8
 dd 0xffffc9
 dd 0xffffca
 dd 0xffffcb
 dd 0xffffcc
 dd 0xffffcd
 dd 0xffffce
 dd 0xffffcf
 dd 0xffffd0
 dd 0xffffd1
 dd 0xffffd2
 dd 0xffffd3
 dd 0xffffd4
 dd 0xffffd5
 dd 0xffffd6
 dd 0xffffd7
 dd 0xffffd8
 dd 0xffffd9
 dd 0xffffda
 dd 0xffffdb
 dd 0xffffdc
 dd 0xffffdd
 dd 0xffffde
 dd 0xffffdf
 dd 0xffffe0
 dd 0xffffe1
 dd 0xffffe2
 dd 0xffffe3
 dd 0xffffe4
 dd 0xffffe5
 dd 0xffffe6
 dd 0xffffe7
 dd 0xffffe8
 dd 0xffffe9
 dd 0xffffea
 dd 0xffffeb
 dd 0xffffec
 dd 0xffffed
 dd 0xffffee
 dd 0xffffef
 dd 0xfffff0
 dd 0xfffff1
 dd 0xfffff2
 dd 0xfffff3
 dd 0xfffff4
 dd 0xfffff5
 dd 0xfffff6
 dd 0xfffff7
 dd 0xfffff8
 dd 0xfffff9
 dd 0xfffffa
 dd 0xfffffb
 dd 0xfffffc
 dd 0xfffffd
 dd 0xfffffe
 dd 0xffffff
 dd 0x20
 dd 0x69
 dd 0x6e
 dd 0x20
 dd 0x0
 dd 0x3a
 dd 0x20
 dd 0x75
 dd 0x6e
 dd 0x6b
 dd 0x6e
 dd 0x6f
 dd 0x77
 dd 0x6e
 dd 0x20
 dd 0x66
 dd 0x6f
 dd 0x72
 dd 0x6d
 dd 0x61
 dd 0x74
 dd 0x21
 dd 0xa
 dd 0x0
 dd 0x1
 dd 0x1
 dd 0x1
 dd 0xffffff
 dd 0x0
 dd 0xffffff
 dd 0x29
 dd 0x6e
 dd 0x69
 dd 0x6c
 dd 0x0
 dd 0x25
 dd 0x64
 dd 0x0
 dd 0x6c
 dd 0x61
 dd 0x6d
 dd 0x62
 dd 0x64
 dd 0x61
 dd 0x20
 dd 0x0
 dd 0x0
 dd 0x0
 dd 0x69
 dd 0x6e
 dd 0x76
 dd 0x61
 dd 0x6c
 dd 0x69
 dd 0x64
 dd 0x20
 dd 0x69
 dd 0x66
 dd 0x0
 dd 0x69
 dd 0x6e
 dd 0x76
 dd 0x61
 dd 0x6c
 dd 0x69
 dd 0x64
 dd 0x20
 dd 0x71
 dd 0x75
 dd 0x6f
 dd 0x74
 dd 0x65
 dd 0x0
 dd 0x69
 dd 0x6e
 dd 0x76
 dd 0x61
 dd 0x6c
 dd 0x69
 dd 0x64
 dd 0x20
 dd 0x64
 dd 0x65
 dd 0x66
 dd 0x69
 dd 0x6e
 dd 0x65
 dd 0x0
 dd 0x69
 dd 0x6e
 dd 0x76
 dd 0x61
 dd 0x6c
 dd 0x69
 dd 0x64
 dd 0x20
 dd 0x6c
 dd 0x61
 dd 0x6d
 dd 0x62
 dd 0x64
 dd 0x61
 dd 0x0
 dd 0x69
 dd 0x6e
 dd 0x76
 dd 0x61
 dd 0x6c
 dd 0x69
 dd 0x64
 dd 0x20
 dd 0x64
 dd 0x65
 dd 0x66
 dd 0x75
 dd 0x6e
 dd 0x0
 dd 0x69
 dd 0x6e
 dd 0x76
 dd 0x61
 dd 0x6c
 dd 0x69
 dd 0x64
 dd 0x20
 dd 0x6c
 dd 0x61
 dd 0x6d
 dd 0x62
 dd 0x64
 dd 0x61
 dd 0x20
 dd 0x61
 dd 0x70
 dd 0x70
 dd 0x6c
 dd 0x69
 dd 0x63
 dd 0x61
 dd 0x74
 dd 0x69
 dd 0x6f
 dd 0x6e
 dd 0x0
 dd 0x69
 dd 0x6e
 dd 0x76
 dd 0x61
 dd 0x6c
 dd 0x69
 dd 0x64
 dd 0x20
 dd 0x61
 dd 0x72
 dd 0x69
 dd 0x74
 dd 0x68
 dd 0x0
 dd 0x69
 dd 0x6e
 dd 0x76
 dd 0x61
 dd 0x6c
 dd 0x69
 dd 0x64
 dd 0x20
 dd 0x61
 dd 0x72
 dd 0x69
 dd 0x74
 dd 0x68
 dd 0x0
 dd 0x69
 dd 0x6e
 dd 0x76
 dd 0x61
 dd 0x6c
 dd 0x69
 dd 0x64
 dd 0x20
 dd 0x65
 dd 0x71
 dd 0x0
 dd 0x69
 dd 0x6e
 dd 0x76
 dd 0x61
 dd 0x6c
 dd 0x69
 dd 0x64
 dd 0x20
 dd 0x63
 dd 0x61
 dd 0x72
 dd 0x2f
 dd 0x63
 dd 0x64
 dd 0x72
 dd 0x0
 dd 0x69
 dd 0x6e
 dd 0x76
 dd 0x61
 dd 0x6c
 dd 0x69
 dd 0x64
 dd 0x20
 dd 0x63
 dd 0x6f
 dd 0x6e
 dd 0x73
 dd 0x0
 dd 0x69
 dd 0x6e
 dd 0x76
 dd 0x61
 dd 0x6c
 dd 0x69
 dd 0x64
 dd 0x20
 dd 0x63
 dd 0x6f
 dd 0x6e
 dd 0x73
 dd 0x0
 dd 0x69
 dd 0x6e
 dd 0x76
 dd 0x61
 dd 0x6c
 dd 0x69
 dd 0x64
 dd 0x20
 dd 0x61
 dd 0x74
 dd 0x6f
 dd 0x6d
 dd 0x0
 dd 0x69
 dd 0x6e
 dd 0x76
 dd 0x61
 dd 0x6c
 dd 0x69
 dd 0x64
 dd 0x20
 dd 0x6e
 dd 0x65
 dd 0x67
 dd 0x3f
 dd 0x0
 dd 0x69
 dd 0x6e
 dd 0x76
 dd 0x61
 dd 0x6c
 dd 0x69
 dd 0x64
 dd 0x20
 dd 0x70
 dd 0x72
 dd 0x69
 dd 0x6e
 dd 0x74
 dd 0x0
 dd 0x75
 dd 0x6e
 dd 0x64
 dd 0x65
 dd 0x66
 dd 0x69
 dd 0x6e
 dd 0x65
 dd 0x64
 dd 0x20
 dd 0x66
 dd 0x75
 dd 0x6e
 dd 0x63
 dd 0x74
 dd 0x69
 dd 0x6f
 dd 0x6e
 dd 0x0
 dd 0x69
 dd 0x6e
 dd 0x76
 dd 0x61
 dd 0x6c
 dd 0x69
 dd 0x64
 dd 0x20
 dd 0x66
 dd 0x75
 dd 0x6e
 dd 0x63
 dd 0x74
 dd 0x69
 dd 0x6f
 dd 0x6e
 dd 0x20
 dd 0x61
 dd 0x70
 dd 0x70
 dd 0x6c
 dd 0x69
 dd 0x63
 dd 0x61
 dd 0x74
 dd 0x69
 dd 0x6f
 dd 0x6e
 dd 0x0
 dd 0x25e
 times 0xfffda3 dd 0

section .text
global _start
_start:
 mov ebx, 0x1 ; fd
 mov edx, 1 ; len
 mov edi, 0
 mov eax, 1
PCJMP:
 cmp eax, 1
 je _PCJMP
 ret
_PCJMP:
 pop rax
 mov eax, [JMP_TABLE + 4*edi]
 sub eax, 0xabad1dea
 jz BB0
 jmp rax

; ----- Start of 0 -----

BB0:
 ; op: JMP
 mov edi, 0x49a
 mov eax, 1
 call PCJMP

BB1:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x34
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffd0
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcf
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB2:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffe8
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcf
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffce
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffce
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x4
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB3:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffce
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB4:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x6
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB5:
 ; op: JMP
 mov edi, 0x8
 mov eax, 1
 call PCJMP

BB6:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffd0
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcf
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffd0
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcf
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffd0
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcf
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffce
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB7:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcf
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcf
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x2
 mov eax, 1
 call PCJMP

BB8:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcd
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB9:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffe8
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcf
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0xb
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB10:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffd0
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcf
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB11:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcf
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0xd
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB12:
 ; op: JMP
 mov edi, 0xe
 mov eax, 1
 call PCJMP

BB13:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcf
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: SUB
 sub dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcf
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x9
 mov eax, 1
 call PCJMP

BB14:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB15:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x35
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x11
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB16:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB17:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x13
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB18:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB19:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x15
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB20:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB21:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB22:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffe5
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffcd
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x18
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB23:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB24:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1a
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB25:
 ; op: JMP
 mov edi, 0x1c
 mov eax, 1
 call PCJMP

BB26:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB27:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x16
 mov eax, 1
 call PCJMP

BB28:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcb
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB29:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffcd
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1f
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB30:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffe5
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcb
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffcd
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB31:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x21
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB32:
 ; op: JMP
 mov edi, 0x22
 mov eax, 1
 call PCJMP

BB33:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: SUB
 sub dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x1d
 mov eax, 1
 call PCJMP

BB34:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffcb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB35:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB36:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x26
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB37:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB38:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xfffffe
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x27
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1
 mov eax, 1
 call PCJMP

BB39:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x3
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB40:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB41:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xfffffe
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2a
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1
 mov eax, 1
 call PCJMP

BB42:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x3
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB43:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB44:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x5
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB45:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x18
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x2f
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB46:
 ; op: JMP
 mov edi, 0x30
 mov eax, 1
 call PCJMP

BB47:
 ; op: JMP
 mov edi, 0x3b
 mov eax, 1
 call PCJMP

BB48:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x32
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB49:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: JMP
 mov edi, 0x33
 mov eax, 1
 call PCJMP

BB50:
 ; op: MOV
 mov dword [reg_a], 0x0

BB51:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x35
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB52:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: JMP
 mov edi, 0x36
 mov eax, 1
 call PCJMP

BB53:
 ; op: MOV
 mov dword [reg_a], 0x0

BB54:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x38
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB55:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB56:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x3a
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB57:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB58:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x2d
 mov eax, 1
 call PCJMP

BB59:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB60:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB61:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x5
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB62:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x18
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x40
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB63:
 ; op: JMP
 mov edi, 0x41
 mov eax, 1
 call PCJMP

BB64:
 ; op: JMP
 mov edi, 0x4c
 mov eax, 1
 call PCJMP

BB65:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x43
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB66:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: JMP
 mov edi, 0x44
 mov eax, 1
 call PCJMP

BB67:
 ; op: MOV
 mov dword [reg_a], 0x0

BB68:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x46
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB69:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: JMP
 mov edi, 0x47
 mov eax, 1
 call PCJMP

BB70:
 ; op: MOV
 mov dword [reg_a], 0x0

BB71:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x49
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB72:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB73:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x4b
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB74:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB75:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x3e
 mov eax, 1
 call PCJMP

BB76:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB77:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB78:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x5
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB79:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x18
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x51
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB80:
 ; op: JMP
 mov edi, 0x52
 mov eax, 1
 call PCJMP

BB81:
 ; op: JMP
 mov edi, 0x5b
 mov eax, 1
 call PCJMP

BB82:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x54
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB83:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: JMP
 mov edi, 0x55
 mov eax, 1
 call PCJMP

BB84:
 ; op: MOV
 mov dword [reg_a], 0x0

BB85:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x57
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB86:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: JMP
 mov edi, 0x58
 mov eax, 1
 call PCJMP

BB87:
 ; op: MOV
 mov dword [reg_a], 0x0

BB88:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x5a
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB89:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB90:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x4f
 mov eax, 1
 call PCJMP

BB91:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB92:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB93:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x4
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB94:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x18
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x60
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB95:
 ; op: JMP
 mov edi, 0x61
 mov eax, 1
 call PCJMP

BB96:
 ; op: JMP
 mov edi, 0x67
 mov eax, 1
 call PCJMP

BB97:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x63
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB98:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: JMP
 mov edi, 0x64
 mov eax, 1
 call PCJMP

BB99:
 ; op: MOV
 mov dword [reg_a], 0x0

BB100:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: CMP
 cmp dword [reg_a], 0x0
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x66
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB101:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB102:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x5e
 mov eax, 1
 call PCJMP

BB103:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB104:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB105:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x4
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB106:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x18
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x6c
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB107:
 ; op: JMP
 mov edi, 0x6d
 mov eax, 1
 call PCJMP

BB108:
 ; op: JMP
 mov edi, 0x73
 mov eax, 1
 call PCJMP

BB109:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x6f
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB110:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: JMP
 mov edi, 0x70
 mov eax, 1
 call PCJMP

BB111:
 ; op: MOV
 mov dword [reg_a], 0x0

BB112:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x72
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB113:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB114:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x6a
 mov eax, 1
 call PCJMP

BB115:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB116:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB117:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x4
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB118:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x18
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x78
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB119:
 ; op: JMP
 mov edi, 0x79
 mov eax, 1
 call PCJMP

BB120:
 ; op: JMP
 mov edi, 0x7f
 mov eax, 1
 call PCJMP

BB121:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x7b
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB122:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: JMP
 mov edi, 0x7c
 mov eax, 1
 call PCJMP

BB123:
 ; op: MOV
 mov dword [reg_a], 0x0

BB124:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x7e
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB125:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB126:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x76
 mov eax, 1
 call PCJMP

BB127:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB128:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB129:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax

BB130:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x84
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB131:
 ; op: JMP
 mov edi, 0x85
 mov eax, 1
 call PCJMP

BB132:
 ; op: JMP
 mov edi, 0x87
 mov eax, 1
 call PCJMP

BB133:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB134:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x82
 mov eax, 1
 call PCJMP

BB135:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB136:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB137:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: SUB
 sub dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x8a
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x29
 mov eax, 1
 call PCJMP

BB138:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x30
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x8b
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x24
 mov eax, 1
 call PCJMP

BB139:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x8d
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB140:
 ; op: JMP
 mov edi, 0x89
 mov eax, 1
 call PCJMP

BB141:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB142:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB143:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x20
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffe0
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x20
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x90
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x88
 mov eax, 1
 call PCJMP

BB144:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x91
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x81
 mov eax, 1
 call PCJMP

BB145:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB146:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x94
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB147:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB148:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: SUB
 sub dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x10
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x95
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x29
 mov eax, 1
 call PCJMP

BB149:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x97
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB150:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x30
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: JMP
 mov edi, 0x98
 mov eax, 1
 call PCJMP

BB151:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x61
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff

BB152:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x10
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x99
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x24
 mov eax, 1
 call PCJMP

BB153:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x9b
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB154:
 ; op: JMP
 mov edi, 0x94
 mov eax, 1
 call PCJMP

BB155:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x9d
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB156:
 ; op: MOV
 mov dword [reg_a], 0x2d
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: SUB
 sub dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB157:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB158:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB159:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xc
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0xa1
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB160:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB161:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0xa3
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB162:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xd
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB163:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0xa5
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB164:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x9
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB165:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0xa7
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB166:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xb
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB167:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0xa9
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB168:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x20
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB169:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB170:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB171:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov dword [reg_a], 0x30
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0xad
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB172:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x39
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB173:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB174:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB175:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xb0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xab
 mov eax, 1
 call PCJMP

BB176:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0xb4
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB177:
 ; op: MOV
 mov dword [reg_a], 0x61
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0xb3
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB178:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x66
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB179:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB180:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0xb8
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB181:
 ; op: MOV
 mov dword [reg_a], 0x41
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0xb7
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB182:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x46
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB183:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB184:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB185:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB186:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov dword [reg_a], 0x41
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0xbc
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB187:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x5a
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB188:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB189:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB190:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov dword [reg_a], 0x61
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0xc0
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB191:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x7a
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB192:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0xc4
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB193:
 ; op: MOV
 mov dword [reg_a], 0x41
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0xc3
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB194:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x5a
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB195:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB196:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB197:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB198:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xc7
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xbe
 mov eax, 1
 call PCJMP

BB199:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0xca
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB200:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xc9
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xab
 mov eax, 1
 call PCJMP

BB201:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB202:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB203:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB204:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xcd
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x9f
 mov eax, 1
 call PCJMP

BB205:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0xd1
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB206:
 ; op: MOV
 mov dword [reg_a], 0x20
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0xd0
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB207:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x7f
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB208:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB209:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB210:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB211:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB212:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_b], 0x25d
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_b], 0x25d
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x25d
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_b], 0x25d
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0xd7
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB213:
 ; op: MOV
 mov dword [reg_a], 0x18
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xd6
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x81
 mov eax, 1
 call PCJMP

BB214:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB215:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB216:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB217:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xda
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xf
 mov eax, 1
 call PCJMP

BB218:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xdb
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xd4
 mov eax, 1
 call PCJMP

BB219:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB220:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB221:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB222:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x7
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0xe0
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB223:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB224:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0xe2
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB225:
 ; op: MOV
 mov dword [reg_a], 0x24
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB226:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0xe6
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB227:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0xe5
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB228:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB229:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB230:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB231:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xe8
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x9f
 mov eax, 1
 call PCJMP

BB232:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMPc
 mov edi, 0xea
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB233:
 ; op: JMP
 mov edi, 0xe7
 mov eax, 1
 call PCJMP

BB234:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2d
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0xec
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB235:
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0xee
 mov eax, 1
 call PCJMP

BB236:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2b
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0xee
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB237:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB238:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0xf0
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB239:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x10
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB240:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0xf2
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB241:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x30
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB242:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0xf6
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB243:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x78
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0xf5
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB244:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x58
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB245:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB246:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0xf8
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB247:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x10
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB248:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0xfd
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB249:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x30
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0xfb
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB250:
 ; op: MOV
 mov dword [reg_a], 0x8
 ; op: JMP
 mov edi, 0xfc
 mov eax, 1
 call PCJMP

BB251:
 ; op: MOV
 mov dword [reg_a], 0xa

BB252:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB253:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x101
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB254:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff9
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x100
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB255:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff9
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff9
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB256:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff9
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff9
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB257:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffa
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB258:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x103
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xab
 mov eax, 1
 call PCJMP

BB259:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMPc
 mov edi, 0x105
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB260:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x30
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x10d
 mov eax, 1
 call PCJMP

BB261:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x106
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xbe
 mov eax, 1
 call PCJMP

BB262:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMPc
 mov edi, 0x10c
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB263:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x108
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xba
 mov eax, 1
 call PCJMP

BB264:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMPc
 mov edi, 0x10a
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB265:
 ; op: MOV
 mov dword [reg_a], 0x41
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: JMP
 mov edi, 0x10b
 mov eax, 1
 call PCJMP

BB266:
 ; op: MOV
 mov dword [reg_a], 0x61
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff

BB267:
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x10d
 mov eax, 1
 call PCJMP

BB268:
 ; op: JMP
 mov edi, 0x117
 mov eax, 1
 call PCJMP

BB269:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x10f
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB270:
 ; op: JMP
 mov edi, 0x117
 mov eax, 1
 call PCJMP

BB271:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffa
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x111
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB272:
 ; op: JMP
 mov edi, 0x116
 mov eax, 1
 call PCJMP

BB273:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x114
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB274:
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffa
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x113
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xf
 mov eax, 1
 call PCJMP

BB275:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x116
 mov eax, 1
 call PCJMP

BB276:
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffa
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x115
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xf
 mov eax, 1
 call PCJMP

BB277:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB278:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x102
 mov eax, 1
 call PCJMP

BB279:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x11c
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB280:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffa
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x11a
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB281:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: JMP
 mov edi, 0x11b
 mov eax, 1
 call PCJMP

BB282:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax

BB283:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB284:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB285:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB286:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x11f
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xde
 mov eax, 1
 call PCJMP

BB287:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x3
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB288:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB289:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x122
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xde
 mov eax, 1
 call PCJMP

BB290:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x3
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB291:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB292:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x125
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xde
 mov eax, 1
 call PCJMP

BB293:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x3
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB294:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB295:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB296:
 ; op: MOV
 mov dword [reg_a], 0x30
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x12a
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB297:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x39
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB298:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x12e
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB299:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x12c
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x69
 mov eax, 1
 call PCJMP

BB300:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x12d
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x69
 mov eax, 1
 call PCJMP

BB301:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x30
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x12f
 mov eax, 1
 call PCJMP

BB302:
 ; op: JMP
 mov edi, 0x130
 mov eax, 1
 call PCJMP

BB303:
 ; op: JMP
 mov edi, 0x128
 mov eax, 1
 call PCJMP

BB304:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB305:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB306:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB307:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB308:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x6
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x136
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB309:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB310:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x137
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x24
 mov eax, 1
 call PCJMP

BB311:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x138
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xf
 mov eax, 1
 call PCJMP

BB312:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x139
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xf
 mov eax, 1
 call PCJMP

BB313:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB314:
 ; op: MOV
 mov dword [reg_a], 0x8000
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x5
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: MOV
 mov dword [reg_a], 0x13b
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, dword [reg_c]
 mov eax, 1
 call PCJMP

BB315:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x13d
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB316:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x13e
 mov eax, 1
 call PCJMP

BB317:
 ; op: JMP
 mov edi, 0x13f
 mov eax, 1
 call PCJMP

BB318:
 ; op: JMP
 mov edi, 0x13a
 mov eax, 1
 call PCJMP

BB319:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x5
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: MOV
 mov dword [reg_a], 0x140
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, dword [reg_c]
 mov eax, 1
 call PCJMP

BB320:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x8000
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x142
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB321:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x143
 mov eax, 1
 call PCJMP

BB322:
 ; op: JMP
 mov edi, 0x144
 mov eax, 1
 call PCJMP

BB323:
 ; op: JMP
 mov edi, 0x13f
 mov eax, 1
 call PCJMP

BB324:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x146
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB325:
 ; op: JMP
 mov edi, 0x152
 mov eax, 1
 call PCJMP

BB326:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB327:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x149
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB328:
 ; op: JMP
 mov edi, 0x14a
 mov eax, 1
 call PCJMP

BB329:
 ; op: JMP
 mov edi, 0x14c
 mov eax, 1
 call PCJMP

BB330:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffa
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffa
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB331:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x147
 mov eax, 1
 call PCJMP

BB332:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x14e
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB333:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x150
 mov eax, 1
 call PCJMP

BB334:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x150
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB335:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB336:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB337:
 ; op: JMP
 mov edi, 0x13a
 mov eax, 1
 call PCJMP

BB338:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x5
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x153
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x24
 mov eax, 1
 call PCJMP

BB339:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x154
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x134
 mov eax, 1
 call PCJMP

BB340:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x4
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x5
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x155
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xf
 mov eax, 1
 call PCJMP

BB341:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x156
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x24
 mov eax, 1
 call PCJMP

BB342:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x157
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x134
 mov eax, 1
 call PCJMP

BB343:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x4
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB344:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB345:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x15b
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB346:
 ; op: JMP
 mov edi, 0x15c
 mov eax, 1
 call PCJMP

BB347:
 ; op: JMP
 mov edi, 0x15e
 mov eax, 1
 call PCJMP

BB348:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB349:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x159
 mov eax, 1
 call PCJMP

BB350:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB351:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB352:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB353:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x163
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB354:
 ; op: JMP
 mov edi, 0x164
 mov eax, 1
 call PCJMP

BB355:
 ; op: JMP
 mov edi, 0x166
 mov eax, 1
 call PCJMP

BB356:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB357:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x161
 mov eax, 1
 call PCJMP

BB358:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB359:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB360:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB361:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x16b
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB362:
 ; op: JMP
 mov edi, 0x16c
 mov eax, 1
 call PCJMP

BB363:
 ; op: JMP
 mov edi, 0x16d
 mov eax, 1
 call PCJMP

BB364:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x169
 mov eax, 1
 call PCJMP

BB365:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB366:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB367:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB368:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x172
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB369:
 ; op: JMP
 mov edi, 0x173
 mov eax, 1
 call PCJMP

BB370:
 ; op: JMP
 mov edi, 0x174
 mov eax, 1
 call PCJMP

BB371:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x170
 mov eax, 1
 call PCJMP

BB372:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x176
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB373:
 ; op: JMP
 mov edi, 0x177
 mov eax, 1
 call PCJMP

BB374:
 ; op: JMP
 mov edi, 0x179
 mov eax, 1
 call PCJMP

BB375:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB376:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x174
 mov eax, 1
 call PCJMP

BB377:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB378:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB379:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB380:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x17e
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB381:
 ; op: JMP
 mov edi, 0x17f
 mov eax, 1
 call PCJMP

BB382:
 ; op: JMP
 mov edi, 0x181
 mov eax, 1
 call PCJMP

BB383:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB384:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x17c
 mov eax, 1
 call PCJMP

BB385:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB386:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB387:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax

BB388:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x186
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB389:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB390:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x188
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB391:
 ; op: JMP
 mov edi, 0x189
 mov eax, 1
 call PCJMP

BB392:
 ; op: JMP
 mov edi, 0x18e
 mov eax, 1
 call PCJMP

BB393:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x18b
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB394:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB395:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x18d
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB396:
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB397:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x184
 mov eax, 1
 call PCJMP

BB398:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB399:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB400:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB401:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x193
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB402:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB403:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x195
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB404:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB405:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x197
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB406:
 ; op: JMP
 mov edi, 0x198
 mov eax, 1
 call PCJMP

BB407:
 ; op: JMP
 mov edi, 0x19d
 mov eax, 1
 call PCJMP

BB408:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x19a
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB409:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB410:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x19c
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB411:
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB412:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x191
 mov eax, 1
 call PCJMP

BB413:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB414:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB415:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax

BB416:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1a2
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB417:
 ; op: JMP
 mov edi, 0x1a3
 mov eax, 1
 call PCJMP

BB418:
 ; op: JMP
 mov edi, 0x1a6
 mov eax, 1
 call PCJMP

BB419:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1a5
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB420:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB421:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x1a0
 mov eax, 1
 call PCJMP

BB422:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB423:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB424:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1a9
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x168
 mov eax, 1
 call PCJMP

BB425:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1aa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xd4
 mov eax, 1
 call PCJMP

BB426:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1ab
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x17b
 mov eax, 1
 call PCJMP

BB427:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB428:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB429:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x4
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x1af
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB430:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB431:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1b1
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB432:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB433:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB434:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1b4
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB435:
 ; op: JMP
 mov edi, 0x1b5
 mov eax, 1
 call PCJMP

BB436:
 ; op: JMP
 mov edi, 0x1b8
 mov eax, 1
 call PCJMP

BB437:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1b7
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB438:
 ; op: JMP
 mov edi, 0x1b1
 mov eax, 1
 call PCJMP

BB439:
 ; op: JMP
 mov edi, 0x1b2
 mov eax, 1
 call PCJMP

BB440:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1ba
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB441:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB442:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB443:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB444:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1c1
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB445:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1bf
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB446:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x1c0
 mov eax, 1
 call PCJMP

BB447:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB448:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB449:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1c3
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB450:
 ; op: JMP
 mov edi, 0x1bc
 mov eax, 1
 call PCJMP

BB451:
 ; op: JMP
 mov edi, 0x1bb
 mov eax, 1
 call PCJMP

BB452:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB453:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x3
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x24
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB454:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1ca
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB455:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1c9
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB456:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB457:
 ; op: JMP
 mov edi, 0x1cb
 mov eax, 1
 call PCJMP

BB458:
 ; op: JMP
 mov edi, 0x1cc
 mov eax, 1
 call PCJMP

BB459:
 ; op: JMP
 mov edi, 0x1c6
 mov eax, 1
 call PCJMP

BB460:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: SUB
 sub dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB461:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB462:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x3
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1d6
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB463:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x24
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB464:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1d2
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB465:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: SUB
 sub dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB466:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1d4
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB467:
 ; op: JMP
 mov edi, 0x1d6
 mov eax, 1
 call PCJMP

BB468:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: SUB
 sub dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1d6
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB469:
 ; op: JMP
 mov edi, 0x1d0
 mov eax, 1
 call PCJMP

BB470:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB471:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB472:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x3
 and dword [reg_sp], 0xffffff

BB473:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1e2
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB474:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB475:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1dd
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB476:
 ; op: JMP
 mov edi, 0x1de
 mov eax, 1
 call PCJMP

BB477:
 ; op: JMP
 mov edi, 0x1e1
 mov eax, 1
 call PCJMP

BB478:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1e0
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB479:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB480:
 ; op: JMP
 mov edi, 0x1db
 mov eax, 1
 call PCJMP

BB481:
 ; op: JMP
 mov edi, 0x1e3
 mov eax, 1
 call PCJMP

BB482:
 ; op: JMP
 mov edi, 0x1e4
 mov eax, 1
 call PCJMP

BB483:
 ; op: JMP
 mov edi, 0x1d9
 mov eax, 1
 call PCJMP

BB484:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB485:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB486:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1e7
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x81
 mov eax, 1
 call PCJMP

BB487:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB488:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x26
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB489:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1eb
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB490:
 ; op: JMP
 mov edi, 0x1ec
 mov eax, 1
 call PCJMP

BB491:
 ; op: JMP
 mov edi, 0x216
 mov eax, 1
 call PCJMP

BB492:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x25
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1f2
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB493:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: CMP
 cmp dword [reg_a], 0x0
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1f1
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB494:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1f0
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB495:
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x1f1
 mov eax, 1
 call PCJMP

BB496:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB497:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x215
 mov eax, 1
 call PCJMP

BB498:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffdb
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffdb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6c
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1f4
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB499:
 ; op: JMP
 mov edi, 0x201
 mov eax, 1
 call PCJMP

BB500:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffdb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x64
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1f6
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB501:
 ; op: JMP
 mov edi, 0x202
 mov eax, 1
 call PCJMP

BB502:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffdb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x75
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1f8
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB503:
 ; op: JMP
 mov edi, 0x202
 mov eax, 1
 call PCJMP

BB504:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffdb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x78
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1fa
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB505:
 ; op: JMP
 mov edi, 0x204
 mov eax, 1
 call PCJMP

BB506:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffdb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x73
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1fc
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB507:
 ; op: JMP
 mov edi, 0x206
 mov eax, 1
 call PCJMP

BB508:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffdb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x63
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x1fe
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB509:
 ; op: JMP
 mov edi, 0x207
 mov eax, 1
 call PCJMP

BB510:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffdb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x25
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x200
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB511:
 ; op: JMP
 mov edi, 0x208
 mov eax, 1
 call PCJMP

BB512:
 ; op: JMP
 mov edi, 0x209
 mov eax, 1
 call PCJMP

BB513:
 ; op: JMP
 mov edi, 0x1f2
 mov eax, 1
 call PCJMP

BB514:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffdd
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x20
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x5
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x5
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x203
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x88
 mov eax, 1
 call PCJMP

BB515:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffdc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x20e
 mov eax, 1
 call PCJMP

BB516:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffdd
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x20
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x5
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x5
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x205
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x92
 mov eax, 1
 call PCJMP

BB517:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffdc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x20e
 mov eax, 1
 call PCJMP

BB518:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x5
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x5
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffdc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x20e
 mov eax, 1
 call PCJMP

BB519:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x5
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x5
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffdd
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffdd
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffdd
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffdc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x20e
 mov eax, 1
 call PCJMP

BB520:
 ; op: MOV
 mov dword [reg_a], 0x25
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffdd
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffdd
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffffdd
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffdc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x20e
 mov eax, 1
 call PCJMP

BB521:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x20a
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x8f
 mov eax, 1
 call PCJMP

BB522:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x124
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x20b
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x81
 mov eax, 1
 call PCJMP

BB523:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x20c
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x81
 mov eax, 1
 call PCJMP

BB524:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x129
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x20d
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x81
 mov eax, 1
 call PCJMP

BB525:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB526:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffdc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x20f
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x168
 mov eax, 1
 call PCJMP

BB527:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffda
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: CMP
 cmp dword [reg_a], 0x0
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x214
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB528:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffda
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x212
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB529:
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x214
 mov eax, 1
 call PCJMP

BB530:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffdc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x213
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x17b
 mov eax, 1
 call PCJMP

BB531:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff

BB532:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffda
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB533:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x1e9
 mov eax, 1
 call PCJMP

BB534:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB535:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB536:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x100
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x219
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e8
 mov eax, 1
 call PCJMP

BB537:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x4
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB538:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB539:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x4
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x21c
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e8
 mov eax, 1
 call PCJMP

BB540:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x4
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB541:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB542:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x3
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x21f
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x218
 mov eax, 1
 call PCJMP

BB543:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x3
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB544:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB545:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x101
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x100
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffff00
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x222
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e8
 mov eax, 1
 call PCJMP

BB546:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x4
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffeff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffff00
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffeff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffff00
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x223
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x81
 mov eax, 1
 call PCJMP

BB547:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffeff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB548:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB549:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x2
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x226
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x221
 mov eax, 1
 call PCJMP

BB550:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB551:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB552:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x3
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x229
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x221
 mov eax, 1
 call PCJMP

BB553:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB554:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x22b
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x221
 mov eax, 1
 call PCJMP

BB555:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB556:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB557:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB558:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB559:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov dword [reg_b], 0x13c
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB560:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB561:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB562:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB563:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x3
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x234
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xf
 mov eax, 1
 call PCJMP

BB564:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB565:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x237
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB566:
 ; op: JMP
 mov edi, 0x238
 mov eax, 1
 call PCJMP

BB567:
 ; op: JMP
 mov edi, 0x23a
 mov eax, 1
 call PCJMP

BB568:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB569:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x235
 mov eax, 1
 call PCJMP

BB570:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB571:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB572:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x23d
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x81
 mov eax, 1
 call PCJMP

BB573:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB574:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_b], 0x13f
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x244
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB575:
 ; op: MOV
 mov dword [reg_b], 0x140
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x241
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB576:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB577:
 ; op: GETC
 mov eax, 0x3
 mov ecx, reg_a
 int 0x80
 ; op: JMPc
 mov edi, 0x243
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB578:
 ; op: MOV
 mov dword [reg_a], 0xffffff

BB579:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x140
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB580:
 ; op: MOV
 mov dword [reg_b], 0x13f
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov dword [reg_b], 0x13f
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB581:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB582:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x247
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x23e
 mov eax, 1
 call PCJMP

BB583:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB584:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB585:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov dword [reg_b], 0x13f
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x24b
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB586:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x13f
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB587:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB588:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB589:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB590:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB591:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB592:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB593:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x253
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB594:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB595:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB596:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x25d
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB597:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x256
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x23e
 mov eax, 1
 call PCJMP

BB598:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x25a
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB599:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x259
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB600:
 ; op: JMP
 mov edi, 0x25f
 mov eax, 1
 call PCJMP

BB601:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB602:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x25c
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB603:
 ; op: JMP
 mov edi, 0x25f
 mov eax, 1
 call PCJMP

BB604:
 ; op: JMP
 mov edi, 0x25e
 mov eax, 1
 call PCJMP

BB605:
 ; op: JMP
 mov edi, 0x25f
 mov eax, 1
 call PCJMP

BB606:
 ; op: JMP
 mov edi, 0x254
 mov eax, 1
 call PCJMP

BB607:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB608:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB609:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_b], 0x141
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x263
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB610:
 ; op: MOV
 mov dword [reg_b], 0x141
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov dword [reg_b], 0x141
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x267
 mov eax, 1
 call PCJMP

BB611:
 ; op: GETC
 mov eax, 0x3
 mov ecx, reg_a
 int 0x80
 ; op: JMPc
 mov edi, 0x265
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB612:
 ; op: MOV
 mov dword [reg_a], 0xffffff

BB613:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x267
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB614:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB615:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB616:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB617:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_b], 0x141
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x26b
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB618:
 ; op: MOV
 mov dword [reg_b], 0x141
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB619:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: GETC
 mov eax, 0x3
 mov ecx, reg_a
 int 0x80
 ; op: JMPc
 mov edi, 0x26d
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB620:
 ; op: MOV
 mov dword [reg_a], 0xffffff

BB621:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x141
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB622:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB623:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x141
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB624:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: CMP
 cmp dword [reg_a], 0x0
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x273
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB625:
 ; op: MOV
 mov dword [reg_b], 0x13d
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x143
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x272
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x23c
 mov eax, 1
 call PCJMP

BB626:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB627:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x278
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB628:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x7fff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x276
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB629:
 ; op: MOV
 mov dword [reg_a], 0x2d
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB630:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x147
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x277
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x225
 mov eax, 1
 call PCJMP

BB631:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB632:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x27b
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB633:
 ; op: MOV
 mov dword [reg_b], 0x13d
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x27a
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x23c
 mov eax, 1
 call PCJMP

BB634:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB635:
 ; op: MOV
 mov dword [reg_a], 0x28
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x27e
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB636:
 ; op: MOV
 mov dword [reg_b], 0x13d
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x14a
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x27d
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x23c
 mov eax, 1
 call PCJMP

BB637:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff

BB638:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB639:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x284
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB640:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x281
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB641:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x283
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB642:
 ; op: MOV
 mov dword [reg_a], 0x20
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB643:
 ; op: JMP
 mov edi, 0x285
 mov eax, 1
 call PCJMP

BB644:
 ; op: JMP
 mov edi, 0x286
 mov eax, 1
 call PCJMP

BB645:
 ; op: JMP
 mov edi, 0x27f
 mov eax, 1
 call PCJMP

BB646:
 ; op: MOV
 mov dword [reg_a], 0x29
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB647:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x4
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x288
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xd9
 mov eax, 1
 call PCJMP

BB648:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB649:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB650:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x4
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x28b
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xd9
 mov eax, 1
 call PCJMP

BB651:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB652:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB653:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x28e
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x28a
 mov eax, 1
 call PCJMP

BB654:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB655:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB656:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x291
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x28a
 mov eax, 1
 call PCJMP

BB657:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB658:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB659:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x295
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB660:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB661:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x296
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x28a
 mov eax, 1
 call PCJMP

BB662:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB663:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB664:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x299
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x28a
 mov eax, 1
 call PCJMP

BB665:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB666:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB667:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x29d
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB668:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB669:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x29f
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB670:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB671:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB672:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB673:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x2a3
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB674:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB675:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB676:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB677:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x2a6
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x261
 mov eax, 1
 call PCJMP

BB678:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB679:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x20
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x2a9
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB680:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB681:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x2ac
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB682:
 ; op: MOV
 mov dword [reg_a], 0x2ab
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x261
 mov eax, 1
 call PCJMP

BB683:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x2ad
 mov eax, 1
 call PCJMP

BB684:
 ; op: JMP
 mov edi, 0x2ae
 mov eax, 1
 call PCJMP

BB685:
 ; op: JMP
 mov edi, 0x2a7
 mov eax, 1
 call PCJMP

BB686:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2af
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x26f
 mov eax, 1
 call PCJMP

BB687:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB688:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x4
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB689:
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: JMPc
 mov edi, 0x2bd
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB690:
 ; op: MOV
 mov dword [reg_a], 0x2b3
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x2a5
 mov eax, 1
 call PCJMP

BB691:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_a], 0x2b4
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x269
 mov eax, 1
 call PCJMP

BB692:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_b], 0x142
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x2b7
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB693:
 ; op: MOV
 mov dword [reg_a], 0x2b6
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x261
 mov eax, 1
 call PCJMP

BB694:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMP
 mov edi, 0x2bf
 mov eax, 1
 call PCJMP

BB695:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x2b8
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x480
 mov eax, 1
 call PCJMP

BB696:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2b9
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x287
 mov eax, 1
 call PCJMP

BB697:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x2bb
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB698:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x2bc
 mov eax, 1
 call PCJMP

BB699:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB700:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x2be
 mov eax, 1
 call PCJMP

BB701:
 ; op: JMP
 mov edi, 0x2bf
 mov eax, 1
 call PCJMP

BB702:
 ; op: JMP
 mov edi, 0x2b1
 mov eax, 1
 call PCJMP

BB703:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2c0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x293
 mov eax, 1
 call PCJMP

BB704:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB705:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB706:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x66
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9c
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB707:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x20
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x2c5
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB708:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB709:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x2c7
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB710:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x28
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB711:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x2c9
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB712:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x29
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB713:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x2cc
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB714:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffff9d
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9c
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x2cb
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x261
 mov eax, 1
 call PCJMP

BB715:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9c
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9c
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x2cd
 mov eax, 1
 call PCJMP

BB716:
 ; op: JMP
 mov edi, 0x2ce
 mov eax, 1
 call PCJMP

BB717:
 ; op: JMP
 mov edi, 0x2c3
 mov eax, 1
 call PCJMP

BB718:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2cf
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x26f
 mov eax, 1
 call PCJMP

BB719:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9c
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x2d1
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB720:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffff9d
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6e
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB721:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x2d3
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB722:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffff9d
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x69
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB723:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x2d5
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB724:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffff9d
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6c
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB725:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x2d7
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB726:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB727:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x4
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9c
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2d8
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xd9
 mov eax, 1
 call PCJMP

BB728:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9b
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9a
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB729:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9a
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9c
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x2db
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB730:
 ; op: JMP
 mov edi, 0x2dc
 mov eax, 1
 call PCJMP

BB731:
 ; op: JMP
 mov edi, 0x2de
 mov eax, 1
 call PCJMP

BB732:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xffff9d
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9a
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9b
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9a
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB733:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9a
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9a
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x2d9
 mov eax, 1
 call PCJMP

BB734:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9b
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9a
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffff9b
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2df
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x290
 mov eax, 1
 call PCJMP

BB735:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB736:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB737:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2d
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x2e3
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB738:
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x2e4
 mov eax, 1
 call PCJMP

BB739:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x30
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB740:
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: JMPc
 mov edi, 0x2ee
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB741:
 ; op: MOV
 mov dword [reg_a], 0x2e6
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x261
 mov eax, 1
 call PCJMP

BB742:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x30
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x2e8
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB743:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x39
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB744:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x2eb
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB745:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2ea
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xf
 mov eax, 1
 call PCJMP

BB746:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x30
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x2ed
 mov eax, 1
 call PCJMP

BB747:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2ec
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x26f
 mov eax, 1
 call PCJMP

BB748:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x2f0
 mov eax, 1
 call PCJMP

BB749:
 ; op: JMP
 mov edi, 0x2ef
 mov eax, 1
 call PCJMP

BB750:
 ; op: JMP
 mov edi, 0x2f0
 mov eax, 1
 call PCJMP

BB751:
 ; op: JMP
 mov edi, 0x2e4
 mov eax, 1
 call PCJMP

BB752:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x2f5
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB753:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x2f4
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB754:
 ; op: MOV
 mov dword [reg_a], 0x2d
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2f3
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x2c2
 mov eax, 1
 call PCJMP

BB755:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB756:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB757:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2f6
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x28d
 mov eax, 1
 call PCJMP

BB758:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB759:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB760:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB761:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x2fb
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB762:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB763:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x2fd
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB764:
 ; op: JMP
 mov edi, 0x2fe
 mov eax, 1
 call PCJMP

BB765:
 ; op: JMP
 mov edi, 0x301
 mov eax, 1
 call PCJMP

BB766:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x300
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB767:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB768:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x2f9
 mov eax, 1
 call PCJMP

BB769:
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB770:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB771:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax

BB772:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x309
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB773:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x306
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x2f8
 mov eax, 1
 call PCJMP

BB774:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: JMPc
 mov edi, 0x308
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB775:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB776:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x30a
 mov eax, 1
 call PCJMP

BB777:
 ; op: JMP
 mov edi, 0x30b
 mov eax, 1
 call PCJMP

BB778:
 ; op: JMP
 mov edi, 0x304
 mov eax, 1
 call PCJMP

BB779:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB780:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB781:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x30e
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x303
 mov eax, 1
 call PCJMP

BB782:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: CMP
 cmp dword [reg_a], 0x0
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x311
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB783:
 ; op: MOV
 mov dword [reg_a], 0x4
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x310
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xd9
 mov eax, 1
 call PCJMP

BB784:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x2
 and dword [reg_a], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB785:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB786:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax

BB787:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x315
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB788:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB789:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x31a
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB790:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x317
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x320
 mov eax, 1
 call PCJMP

BB791:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: CMP
 cmp dword [reg_a], 0x0
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x319
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB792:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB793:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x31b
 mov eax, 1
 call PCJMP

BB794:
 ; op: JMP
 mov edi, 0x31c
 mov eax, 1
 call PCJMP

BB795:
 ; op: JMP
 mov edi, 0x313
 mov eax, 1
 call PCJMP

BB796:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x31e
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB797:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB798:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB799:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB800:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x322
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB801:
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB802:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x324
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB803:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB804:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x326
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB805:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB806:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x328
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB807:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB808:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x32a
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB809:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB810:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x32d
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB811:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x32c
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x2f8
 mov eax, 1
 call PCJMP

BB812:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB813:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x32e
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x312
 mov eax, 1
 call PCJMP

BB814:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB815:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB816:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB817:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x333
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB818:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: ADD
 add dword [reg_a], 0x1
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x334
 mov eax, 1
 call PCJMP

BB819:
 ; op: JMP
 mov edi, 0x335
 mov eax, 1
 call PCJMP

BB820:
 ; op: JMP
 mov edi, 0x331
 mov eax, 1
 call PCJMP

BB821:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB822:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB823:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x18
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x338
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x29b
 mov eax, 1
 call PCJMP

BB824:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMPc
 mov edi, 0x343
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB825:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x33b
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB826:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB827:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x342
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB828:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x33d
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x303
 mov eax, 1
 call PCJMP

BB829:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x33f
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB830:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB831:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_b], 0x153
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x340
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x303
 mov eax, 1
 call PCJMP

BB832:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x342
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB833:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB834:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB835:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x3b0
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB836:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x69
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x346
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB837:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x66
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB838:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x348
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB839:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB840:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x356
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB841:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x34a
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x330
 mov eax, 1
 call PCJMP

BB842:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x4
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x34e
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB843:
 ; op: MOV
 mov dword [reg_a], 0x154
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x34c
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e6
 mov eax, 1
 call PCJMP

BB844:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x34d
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB845:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB846:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x34f
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB847:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x353
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB848:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x351
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB849:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB850:
 ; op: JMP
 mov edi, 0x355
 mov eax, 1
 call PCJMP

BB851:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x354
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB852:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB853:
 ; op: JMP
 mov edi, 0x3b0
 mov eax, 1
 call PCJMP

BB854:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x71
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x358
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB855:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x75
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB856:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x35a
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB857:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6f
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB858:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x35c
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB859:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x74
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB860:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x35e
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB861:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x4
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x65
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB862:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x360
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB863:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x5
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB864:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x368
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB865:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x362
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x330
 mov eax, 1
 call PCJMP

BB866:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x366
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB867:
 ; op: MOV
 mov dword [reg_a], 0x15f
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x364
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e6
 mov eax, 1
 call PCJMP

BB868:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x365
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB869:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB870:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB871:
 ; op: JMP
 mov edi, 0x3b0
 mov eax, 1
 call PCJMP

BB872:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x64
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x36a
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB873:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x65
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB874:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x36c
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB875:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x66
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB876:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x36e
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB877:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x69
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB878:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x370
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB879:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x4
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6e
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB880:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x372
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB881:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x5
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x65
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB882:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x374
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB883:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB884:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x380
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB885:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x376
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x330
 mov eax, 1
 call PCJMP

BB886:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x378
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB887:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB888:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x37c
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB889:
 ; op: MOV
 mov dword [reg_a], 0x16d
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x37a
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e6
 mov eax, 1
 call PCJMP

BB890:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x37b
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB891:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB892:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x37d
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB893:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x153
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x37e
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x30d
 mov eax, 1
 call PCJMP

BB894:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x3
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB895:
 ; op: JMP
 mov edi, 0x3b0
 mov eax, 1
 call PCJMP

BB896:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6c
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x382
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB897:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x61
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB898:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x384
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB899:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6d
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB900:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x386
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB901:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x62
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB902:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x388
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB903:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x4
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x64
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB904:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x38a
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB905:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x5
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x61
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB906:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x38c
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB907:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB908:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x398
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB909:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x38e
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x330
 mov eax, 1
 call PCJMP

BB910:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x391
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB911:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x390
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x2a1
 mov eax, 1
 call PCJMP

BB912:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 cmp dword [reg_a], 0x0
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB913:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x395
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB914:
 ; op: MOV
 mov dword [reg_a], 0x17c
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x393
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e6
 mov eax, 1
 call PCJMP

BB915:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x394
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB916:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB917:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x396
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x298
 mov eax, 1
 call PCJMP

BB918:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB919:
 ; op: JMP
 mov edi, 0x3b0
 mov eax, 1
 call PCJMP

BB920:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x64
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x39a
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB921:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x65
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB922:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x39c
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB923:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x66
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB924:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x39e
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB925:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x75
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB926:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x3a0
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB927:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x4
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6e
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB928:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x3a2
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB929:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x5
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB930:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x3b0
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB931:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3a4
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x330
 mov eax, 1
 call PCJMP

BB932:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x4
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x3a6
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB933:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB934:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x3a9
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB935:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3a8
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x2a1
 mov eax, 1
 call PCJMP

BB936:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 cmp dword [reg_a], 0x0
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB937:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x3ad
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB938:
 ; op: MOV
 mov dword [reg_a], 0x18b
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3ab
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e6
 mov eax, 1
 call PCJMP

BB939:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3ac
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB940:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB941:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3ae
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x298
 mov eax, 1
 call PCJMP

BB942:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffa
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffa
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x153
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3af
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x30d
 mov eax, 1
 call PCJMP

BB943:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x3
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffa
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB944:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3b1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB945:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff9
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff9
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x3c4
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB946:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff9
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x3b4
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB947:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff9
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMP
 mov edi, 0x3b5
 mov eax, 1
 call PCJMP

BB948:
 ; op: MOV
 mov dword [reg_a], 0x0

BB949:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff8
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3b6
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x330
 mov eax, 1
 call PCJMP

BB950:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff8
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3b7
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x330
 mov eax, 1
 call PCJMP

BB951:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x3bb
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB952:
 ; op: MOV
 mov dword [reg_a], 0x199
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3b9
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e6
 mov eax, 1
 call PCJMP

BB953:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3ba
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB954:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB955:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff7
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff6
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB956:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff8
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x3c0
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB957:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff6
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3be
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB958:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff8
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xfffff7
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3bf
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x30d
 mov eax, 1
 call PCJMP

BB959:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x3
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff8
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff8
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff6
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff6
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x3c1
 mov eax, 1
 call PCJMP

BB960:
 ; op: JMP
 mov edi, 0x3c2
 mov eax, 1
 call PCJMP

BB961:
 ; op: JMP
 mov edi, 0x3bc
 mov eax, 1
 call PCJMP

BB962:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff9
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff5
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff7
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff5
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3c3
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB963:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB964:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff9
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x47c
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB965:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff9
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff3
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2b
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x3c7
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB966:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2d
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB967:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x3c9
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB968:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2a
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB969:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x3cb
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB970:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2f
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB971:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x3cd
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB972:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB973:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x3d5
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB974:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6d
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x3d0
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB975:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6f
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB976:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x3d2
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB977:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x64
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB978:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x3d4
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB979:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB980:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB981:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x3f2
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB982:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3d7
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x330
 mov eax, 1
 call PCJMP

BB983:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x3db
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB984:
 ; op: MOV
 mov dword [reg_a], 0x1b4
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3d9
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e6
 mov eax, 1
 call PCJMP

BB985:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3da
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB986:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB987:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3dc
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB988:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff2
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3dd
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB989:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff1
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x3df
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB990:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB991:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x3e3
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB992:
 ; op: MOV
 mov dword [reg_a], 0x1c2
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3e1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e6
 mov eax, 1
 call PCJMP

BB993:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3e2
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB994:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB995:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff0
 and dword [reg_b], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2b
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x3e5
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB996:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff0
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x3ef
 mov eax, 1
 call PCJMP

BB997:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2d
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x3e7
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB998:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: SUB
 mov eax, dword [reg_b]
 sub dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff0
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x3ef
 mov eax, 1
 call PCJMP

BB999:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2a
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x3ea
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1000:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3e9
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0xf
 mov eax, 1
 call PCJMP

BB1001:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff0
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x3ef
 mov eax, 1
 call PCJMP

BB1002:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2f
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x3ed
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1003:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3ec
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x24
 mov eax, 1
 call PCJMP

BB1004:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff0
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x3ef
 mov eax, 1
 call PCJMP

BB1005:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3ee
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x29
 mov eax, 1
 call PCJMP

BB1006:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff0
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB1007:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff0
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3f0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x28d
 mov eax, 1
 call PCJMP

BB1008:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1009:
 ; op: JMP
 mov edi, 0x478
 mov eax, 1
 call PCJMP

BB1010:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x65
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x3f4
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1011:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x71
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1012:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x3f6
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1013:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1014:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x404
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1015:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3f8
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x330
 mov eax, 1
 call PCJMP

BB1016:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x3fc
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1017:
 ; op: MOV
 mov dword [reg_a], 0x1d0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3fa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e6
 mov eax, 1
 call PCJMP

BB1018:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3fb
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB1019:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB1020:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3fd
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB1021:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffef
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3fe
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB1022:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffee
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffee
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffef
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3ff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x320
 mov eax, 1
 call PCJMP

BB1023:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: JMPc
 mov edi, 0x402
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1024:
 ; op: MOV
 mov dword [reg_b], 0x152
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1025:
 ; op: JMP
 mov edi, 0x403
 mov eax, 1
 call PCJMP

BB1026:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1027:
 ; op: JMP
 mov edi, 0x478
 mov eax, 1
 call PCJMP

BB1028:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x63
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x408
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1029:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x61
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x407
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB1030:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x64
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1031:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1032:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x40a
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1033:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x72
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1034:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x40c
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1035:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1036:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x41d
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1037:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x40e
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB1038:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffed
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffed
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x410
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1039:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1040:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffed
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x413
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB1041:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x412
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x330
 mov eax, 1
 call PCJMP

BB1042:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1043:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x417
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1044:
 ; op: MOV
 mov dword [reg_a], 0x1db
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x415
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e6
 mov eax, 1
 call PCJMP

BB1045:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x416
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB1046:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB1047:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x61
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x41a
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1048:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffed
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1049:
 ; op: JMP
 mov edi, 0x41c
 mov eax, 1
 call PCJMP

BB1050:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffed
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x41b
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x293
 mov eax, 1
 call PCJMP

BB1051:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1052:
 ; op: JMP
 mov edi, 0x478
 mov eax, 1
 call PCJMP

BB1053:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x63
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x41f
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1054:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6f
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1055:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x421
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1056:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6e
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1057:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x423
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1058:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x73
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1059:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x425
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1060:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x4
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1061:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x43a
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1062:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x427
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x330
 mov eax, 1
 call PCJMP

BB1063:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x42b
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1064:
 ; op: MOV
 mov dword [reg_a], 0x1eb
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x429
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e6
 mov eax, 1
 call PCJMP

BB1065:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x42a
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB1066:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB1067:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x42c
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB1068:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffec
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x42d
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB1069:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffeb
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffeb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x42f
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1070:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffeb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1071:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x433
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1072:
 ; op: MOV
 mov dword [reg_a], 0x1f8
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x431
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e6
 mov eax, 1
 call PCJMP

BB1073:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x432
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB1074:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB1075:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffeb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x435
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1076:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffeb
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: JMP
 mov edi, 0x436
 mov eax, 1
 call PCJMP

BB1077:
 ; op: MOV
 mov dword [reg_a], 0x0

BB1078:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffec
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x437
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x287
 mov eax, 1
 call PCJMP

BB1079:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x438
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x293
 mov eax, 1
 call PCJMP

BB1080:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1081:
 ; op: JMP
 mov edi, 0x478
 mov eax, 1
 call PCJMP

BB1082:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x61
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x43c
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1083:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x74
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1084:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x43e
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1085:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6f
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1086:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x440
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1087:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6d
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1088:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x442
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1089:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x4
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1090:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x44f
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1091:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x444
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x330
 mov eax, 1
 call PCJMP

BB1092:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x448
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1093:
 ; op: MOV
 mov dword [reg_a], 0x205
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x446
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e6
 mov eax, 1
 call PCJMP

BB1094:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x447
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB1095:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB1096:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x449
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB1097:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffea
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffea
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x44a
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x29b
 mov eax, 1
 call PCJMP

BB1098:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMPc
 mov edi, 0x44d
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1099:
 ; op: MOV
 mov dword [reg_b], 0x152
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1100:
 ; op: JMP
 mov edi, 0x44e
 mov eax, 1
 call PCJMP

BB1101:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1102:
 ; op: JMP
 mov edi, 0x478
 mov eax, 1
 call PCJMP

BB1103:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6e
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x451
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1104:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x65
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1105:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x453
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1106:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x67
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1107:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x455
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1108:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3f
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1109:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x457
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1110:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x4
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1111:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x465
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1112:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x459
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x330
 mov eax, 1
 call PCJMP

BB1113:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x45d
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1114:
 ; op: MOV
 mov dword [reg_a], 0x212
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x45b
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e6
 mov eax, 1
 call PCJMP

BB1115:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x45c
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB1116:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB1117:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x45e
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB1118:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffe9
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffe9
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x460
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1119:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffe9
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setb  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1120:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x463
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1121:
 ; op: MOV
 mov dword [reg_b], 0x152
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1122:
 ; op: JMP
 mov edi, 0x464
 mov eax, 1
 call PCJMP

BB1123:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1124:
 ; op: JMP
 mov edi, 0x478
 mov eax, 1
 call PCJMP

BB1125:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x70
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x467
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1126:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x72
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1127:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x469
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1128:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x69
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1129:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x46b
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1130:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x6e
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1131:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x46d
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1132:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x4
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x74
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1133:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x46f
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1134:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x5
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1135:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x478
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1136:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x471
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x330
 mov eax, 1
 call PCJMP

BB1137:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x475
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1138:
 ; op: MOV
 mov dword [reg_a], 0x21f
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x473
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e6
 mov eax, 1
 call PCJMP

BB1139:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x474
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB1140:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB1141:
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x3
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffe
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x1
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x476
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB1142:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffe8
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffe8
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x477
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB1143:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffe8
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1144:
 ; op: MOV
 mov dword [reg_b], 0x13d
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffff4
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x479
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x23c
 mov eax, 1
 call PCJMP

BB1145:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x3a
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x20
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x22d
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x47a
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e6
 mov eax, 1
 call PCJMP

BB1146:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x47b
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB1147:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff

BB1148:
 ; op: MOV
 mov dword [reg_a], 0x240
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x47d
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x1e6
 mov eax, 1
 call PCJMP

BB1149:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0x2
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x47e
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB1150:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1151:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1152:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x481
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x2a5
 mov eax, 1
 call PCJMP

BB1153:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x482
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x261
 mov eax, 1
 call PCJMP

BB1154:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x28
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x486
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1155:
 ; op: MOV
 mov dword [reg_a], 0x484
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x2b0
 mov eax, 1
 call PCJMP

BB1156:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1157:
 ; op: JMP
 mov edi, 0x499
 mov eax, 1
 call PCJMP

BB1158:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x2d
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x1
 ; op: JMPc
 mov edi, 0x48a
 cmp dword [reg_a], 0x0
 setne al
 call PCJMP

BB1159:
 ; op: MOV
 mov dword [reg_a], 0x30
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov dword [reg_b], 0x0
 ; op: JMPc
 mov edi, 0x489
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1160:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x39
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setbe al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1161:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: CMP
 cmp dword [reg_b], 0x0
 setne al
 movzx eax, al
 mov dword [reg_b], eax

BB1162:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x48e
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1163:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x48c
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x2e1
 mov eax, 1
 call PCJMP

BB1164:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1165:
 ; op: JMP
 mov edi, 0x499
 mov eax, 1
 call PCJMP

BB1166:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x3b
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 sete  al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x497
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1167:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: CMP
 mov eax, dword [reg_b]
 cmp dword [reg_a], eax
 setne al
 movzx eax, al
 mov dword [reg_a], eax
 ; op: JMPc
 mov edi, 0x492
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1168:
 ; op: MOV
 mov dword [reg_a], 0x491
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x261
 mov eax, 1
 call PCJMP

BB1169:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: JMP
 mov edi, 0x493
 mov eax, 1
 call PCJMP

BB1170:
 ; op: JMP
 mov edi, 0x494
 mov eax, 1
 call PCJMP

BB1171:
 ; op: JMP
 mov edi, 0x48f
 mov eax, 1
 call PCJMP

BB1172:
 ; op: MOV
 mov dword [reg_a], 0x495
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x480
 mov eax, 1
 call PCJMP

BB1173:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1174:
 ; op: JMP
 mov edi, 0x499
 mov eax, 1
 call PCJMP

BB1175:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xffffff
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x498
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x2c2
 mov eax, 1
 call PCJMP

BB1176:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1177:
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_sp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_bp], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, dword [reg_a]
 mov eax, 1
 call PCJMP

BB1178:
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_bp]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_bp], eax
 ; op: SUB
 sub dword [reg_sp], 0x4
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x74
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xfffffe
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xfffffe
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: ADD
 mov eax, dword [reg_b]
 add dword [reg_a], eax
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_c], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_a]
 mov dword [reg_b], eax
 ; op: MOV
 mov eax, dword [reg_c]
 mov dword [reg_a], eax
 ; op: STORE
 mov eax, dword [reg_b]
 mov ecx, dword [reg_a]
 mov dword [mem + 4*ecx], eax
 ; op: LOAD
 mov eax, dword [reg_sp]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_a], 0xfffffe
 and dword [reg_a], 0xffffff
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x49b
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x290
 mov eax, 1
 call PCJMP

BB1179:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_b], 0x152
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax

BB1180:
 ; op: MOV
 mov dword [reg_a], 0x1
 ; op: JMPc
 mov edi, 0x4a1
 cmp dword [reg_a], 0x0
 sete  al
 call PCJMP

BB1181:
 ; op: MOV
 mov dword [reg_a], 0x3e
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x20
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x49e
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x480
 mov eax, 1
 call PCJMP

BB1182:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_b], eax
 ; op: MOV
 mov dword [reg_a], 0x0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffd
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x49f
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x337
 mov eax, 1
 call PCJMP

BB1183:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x2
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_b]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_bp]
 mov dword [reg_b], eax
 ; op: ADD
 add dword [reg_b], 0xfffffc
 and dword [reg_b], 0xffffff
 ; op: LOAD
 mov eax, dword [reg_b]
 mov eax, dword [mem + 4*eax]
 mov dword [reg_a], eax
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: MOV
 mov dword [reg_a], 0x4a0
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: JMP
 mov edi, 0x270
 mov eax, 1
 call PCJMP

BB1184:
 ; op: MOV
 mov eax, dword [reg_b]
 mov dword [reg_a], eax
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: MOV
 mov dword [reg_a], 0xa
 ; op: MOV
 mov eax, dword [reg_sp]
 mov dword [reg_d], eax
 ; op: ADD
 add dword [reg_d], 0xffffff
 and dword [reg_d], 0xffffff
 ; op: STORE
 mov eax, dword [reg_a]
 mov ecx, dword [reg_d]
 mov dword [mem + 4*ecx], eax
 ; op: MOV
 mov eax, dword [reg_d]
 mov dword [reg_sp], eax
 ; op: PUTC
 mov eax, 0x4
 mov ecx, reg_a
 int 0x80
 ; op: ADD
 add dword [reg_sp], 0x1
 and dword [reg_sp], 0xffffff
 ; op: JMP
 mov edi, 0x4a2
 mov eax, 1
 call PCJMP

BB1185:
 ; op: JMP
 mov edi, 0x4a3
 mov eax, 1
 call PCJMP

BB1186:
 ; op: JMP
 mov edi, 0x49c
 mov eax, 1
 call PCJMP

BB1187:
 ; op: EXIT
 mov eax, ebx
 mov ebx, 0x0
 int 0x80
; ----- End of func -----
JMP_TABLE:
 dd BB0 + 0xabad1dea
 dd BB1 + 0xabad1dea
 dd BB2 + 0xabad1dea
 dd BB3 + 0xabad1dea
 dd BB4 + 0xabad1dea
 dd BB5 + 0xabad1dea
 dd BB6 + 0xabad1dea
 dd BB7 + 0xabad1dea
 dd BB8 + 0xabad1dea
 dd BB9 + 0xabad1dea
 dd BB10 + 0xabad1dea
 dd BB11 + 0xabad1dea
 dd BB12 + 0xabad1dea
 dd BB13 + 0xabad1dea
 dd BB14 + 0xabad1dea
 dd BB15 + 0xabad1dea
 dd BB16 + 0xabad1dea
 dd BB17 + 0xabad1dea
 dd BB18 + 0xabad1dea
 dd BB19 + 0xabad1dea
 dd BB20 + 0xabad1dea
 dd BB21 + 0xabad1dea
 dd BB22 + 0xabad1dea
 dd BB23 + 0xabad1dea
 dd BB24 + 0xabad1dea
 dd BB25 + 0xabad1dea
 dd BB26 + 0xabad1dea
 dd BB27 + 0xabad1dea
 dd BB28 + 0xabad1dea
 dd BB29 + 0xabad1dea
 dd BB30 + 0xabad1dea
 dd BB31 + 0xabad1dea
 dd BB32 + 0xabad1dea
 dd BB33 + 0xabad1dea
 dd BB34 + 0xabad1dea
 dd BB35 + 0xabad1dea
 dd BB36 + 0xabad1dea
 dd BB37 + 0xabad1dea
 dd BB38 + 0xabad1dea
 dd BB39 + 0xabad1dea
 dd BB40 + 0xabad1dea
 dd BB41 + 0xabad1dea
 dd BB42 + 0xabad1dea
 dd BB43 + 0xabad1dea
 dd BB44 + 0xabad1dea
 dd BB45 + 0xabad1dea
 dd BB46 + 0xabad1dea
 dd BB47 + 0xabad1dea
 dd BB48 + 0xabad1dea
 dd BB49 + 0xabad1dea
 dd BB50 + 0xabad1dea
 dd BB51 + 0xabad1dea
 dd BB52 + 0xabad1dea
 dd BB53 + 0xabad1dea
 dd BB54 + 0xabad1dea
 dd BB55 + 0xabad1dea
 dd BB56 + 0xabad1dea
 dd BB57 + 0xabad1dea
 dd BB58 + 0xabad1dea
 dd BB59 + 0xabad1dea
 dd BB60 + 0xabad1dea
 dd BB61 + 0xabad1dea
 dd BB62 + 0xabad1dea
 dd BB63 + 0xabad1dea
 dd BB64 + 0xabad1dea
 dd BB65 + 0xabad1dea
 dd BB66 + 0xabad1dea
 dd BB67 + 0xabad1dea
 dd BB68 + 0xabad1dea
 dd BB69 + 0xabad1dea
 dd BB70 + 0xabad1dea
 dd BB71 + 0xabad1dea
 dd BB72 + 0xabad1dea
 dd BB73 + 0xabad1dea
 dd BB74 + 0xabad1dea
 dd BB75 + 0xabad1dea
 dd BB76 + 0xabad1dea
 dd BB77 + 0xabad1dea
 dd BB78 + 0xabad1dea
 dd BB79 + 0xabad1dea
 dd BB80 + 0xabad1dea
 dd BB81 + 0xabad1dea
 dd BB82 + 0xabad1dea
 dd BB83 + 0xabad1dea
 dd BB84 + 0xabad1dea
 dd BB85 + 0xabad1dea
 dd BB86 + 0xabad1dea
 dd BB87 + 0xabad1dea
 dd BB88 + 0xabad1dea
 dd BB89 + 0xabad1dea
 dd BB90 + 0xabad1dea
 dd BB91 + 0xabad1dea
 dd BB92 + 0xabad1dea
 dd BB93 + 0xabad1dea
 dd BB94 + 0xabad1dea
 dd BB95 + 0xabad1dea
 dd BB96 + 0xabad1dea
 dd BB97 + 0xabad1dea
 dd BB98 + 0xabad1dea
 dd BB99 + 0xabad1dea
 dd BB100 + 0xabad1dea
 dd BB101 + 0xabad1dea
 dd BB102 + 0xabad1dea
 dd BB103 + 0xabad1dea
 dd BB104 + 0xabad1dea
 dd BB105 + 0xabad1dea
 dd BB106 + 0xabad1dea
 dd BB107 + 0xabad1dea
 dd BB108 + 0xabad1dea
 dd BB109 + 0xabad1dea
 dd BB110 + 0xabad1dea
 dd BB111 + 0xabad1dea
 dd BB112 + 0xabad1dea
 dd BB113 + 0xabad1dea
 dd BB114 + 0xabad1dea
 dd BB115 + 0xabad1dea
 dd BB116 + 0xabad1dea
 dd BB117 + 0xabad1dea
 dd BB118 + 0xabad1dea
 dd BB119 + 0xabad1dea
 dd BB120 + 0xabad1dea
 dd BB121 + 0xabad1dea
 dd BB122 + 0xabad1dea
 dd BB123 + 0xabad1dea
 dd BB124 + 0xabad1dea
 dd BB125 + 0xabad1dea
 dd BB126 + 0xabad1dea
 dd BB127 + 0xabad1dea
 dd BB128 + 0xabad1dea
 dd BB129 + 0xabad1dea
 dd BB130 + 0xabad1dea
 dd BB131 + 0xabad1dea
 dd BB132 + 0xabad1dea
 dd BB133 + 0xabad1dea
 dd BB134 + 0xabad1dea
 dd BB135 + 0xabad1dea
 dd BB136 + 0xabad1dea
 dd BB137 + 0xabad1dea
 dd BB138 + 0xabad1dea
 dd BB139 + 0xabad1dea
 dd BB140 + 0xabad1dea
 dd BB141 + 0xabad1dea
 dd BB142 + 0xabad1dea
 dd BB143 + 0xabad1dea
 dd BB144 + 0xabad1dea
 dd BB145 + 0xabad1dea
 dd BB146 + 0xabad1dea
 dd BB147 + 0xabad1dea
 dd BB148 + 0xabad1dea
 dd BB149 + 0xabad1dea
 dd BB150 + 0xabad1dea
 dd BB151 + 0xabad1dea
 dd BB152 + 0xabad1dea
 dd BB153 + 0xabad1dea
 dd BB154 + 0xabad1dea
 dd BB155 + 0xabad1dea
 dd BB156 + 0xabad1dea
 dd BB157 + 0xabad1dea
 dd BB158 + 0xabad1dea
 dd BB159 + 0xabad1dea
 dd BB160 + 0xabad1dea
 dd BB161 + 0xabad1dea
 dd BB162 + 0xabad1dea
 dd BB163 + 0xabad1dea
 dd BB164 + 0xabad1dea
 dd BB165 + 0xabad1dea
 dd BB166 + 0xabad1dea
 dd BB167 + 0xabad1dea
 dd BB168 + 0xabad1dea
 dd BB169 + 0xabad1dea
 dd BB170 + 0xabad1dea
 dd BB171 + 0xabad1dea
 dd BB172 + 0xabad1dea
 dd BB173 + 0xabad1dea
 dd BB174 + 0xabad1dea
 dd BB175 + 0xabad1dea
 dd BB176 + 0xabad1dea
 dd BB177 + 0xabad1dea
 dd BB178 + 0xabad1dea
 dd BB179 + 0xabad1dea
 dd BB180 + 0xabad1dea
 dd BB181 + 0xabad1dea
 dd BB182 + 0xabad1dea
 dd BB183 + 0xabad1dea
 dd BB184 + 0xabad1dea
 dd BB185 + 0xabad1dea
 dd BB186 + 0xabad1dea
 dd BB187 + 0xabad1dea
 dd BB188 + 0xabad1dea
 dd BB189 + 0xabad1dea
 dd BB190 + 0xabad1dea
 dd BB191 + 0xabad1dea
 dd BB192 + 0xabad1dea
 dd BB193 + 0xabad1dea
 dd BB194 + 0xabad1dea
 dd BB195 + 0xabad1dea
 dd BB196 + 0xabad1dea
 dd BB197 + 0xabad1dea
 dd BB198 + 0xabad1dea
 dd BB199 + 0xabad1dea
 dd BB200 + 0xabad1dea
 dd BB201 + 0xabad1dea
 dd BB202 + 0xabad1dea
 dd BB203 + 0xabad1dea
 dd BB204 + 0xabad1dea
 dd BB205 + 0xabad1dea
 dd BB206 + 0xabad1dea
 dd BB207 + 0xabad1dea
 dd BB208 + 0xabad1dea
 dd BB209 + 0xabad1dea
 dd BB210 + 0xabad1dea
 dd BB211 + 0xabad1dea
 dd BB212 + 0xabad1dea
 dd BB213 + 0xabad1dea
 dd BB214 + 0xabad1dea
 dd BB215 + 0xabad1dea
 dd BB216 + 0xabad1dea
 dd BB217 + 0xabad1dea
 dd BB218 + 0xabad1dea
 dd BB219 + 0xabad1dea
 dd BB220 + 0xabad1dea
 dd BB221 + 0xabad1dea
 dd BB222 + 0xabad1dea
 dd BB223 + 0xabad1dea
 dd BB224 + 0xabad1dea
 dd BB225 + 0xabad1dea
 dd BB226 + 0xabad1dea
 dd BB227 + 0xabad1dea
 dd BB228 + 0xabad1dea
 dd BB229 + 0xabad1dea
 dd BB230 + 0xabad1dea
 dd BB231 + 0xabad1dea
 dd BB232 + 0xabad1dea
 dd BB233 + 0xabad1dea
 dd BB234 + 0xabad1dea
 dd BB235 + 0xabad1dea
 dd BB236 + 0xabad1dea
 dd BB237 + 0xabad1dea
 dd BB238 + 0xabad1dea
 dd BB239 + 0xabad1dea
 dd BB240 + 0xabad1dea
 dd BB241 + 0xabad1dea
 dd BB242 + 0xabad1dea
 dd BB243 + 0xabad1dea
 dd BB244 + 0xabad1dea
 dd BB245 + 0xabad1dea
 dd BB246 + 0xabad1dea
 dd BB247 + 0xabad1dea
 dd BB248 + 0xabad1dea
 dd BB249 + 0xabad1dea
 dd BB250 + 0xabad1dea
 dd BB251 + 0xabad1dea
 dd BB252 + 0xabad1dea
 dd BB253 + 0xabad1dea
 dd BB254 + 0xabad1dea
 dd BB255 + 0xabad1dea
 dd BB256 + 0xabad1dea
 dd BB257 + 0xabad1dea
 dd BB258 + 0xabad1dea
 dd BB259 + 0xabad1dea
 dd BB260 + 0xabad1dea
 dd BB261 + 0xabad1dea
 dd BB262 + 0xabad1dea
 dd BB263 + 0xabad1dea
 dd BB264 + 0xabad1dea
 dd BB265 + 0xabad1dea
 dd BB266 + 0xabad1dea
 dd BB267 + 0xabad1dea
 dd BB268 + 0xabad1dea
 dd BB269 + 0xabad1dea
 dd BB270 + 0xabad1dea
 dd BB271 + 0xabad1dea
 dd BB272 + 0xabad1dea
 dd BB273 + 0xabad1dea
 dd BB274 + 0xabad1dea
 dd BB275 + 0xabad1dea
 dd BB276 + 0xabad1dea
 dd BB277 + 0xabad1dea
 dd BB278 + 0xabad1dea
 dd BB279 + 0xabad1dea
 dd BB280 + 0xabad1dea
 dd BB281 + 0xabad1dea
 dd BB282 + 0xabad1dea
 dd BB283 + 0xabad1dea
 dd BB284 + 0xabad1dea
 dd BB285 + 0xabad1dea
 dd BB286 + 0xabad1dea
 dd BB287 + 0xabad1dea
 dd BB288 + 0xabad1dea
 dd BB289 + 0xabad1dea
 dd BB290 + 0xabad1dea
 dd BB291 + 0xabad1dea
 dd BB292 + 0xabad1dea
 dd BB293 + 0xabad1dea
 dd BB294 + 0xabad1dea
 dd BB295 + 0xabad1dea
 dd BB296 + 0xabad1dea
 dd BB297 + 0xabad1dea
 dd BB298 + 0xabad1dea
 dd BB299 + 0xabad1dea
 dd BB300 + 0xabad1dea
 dd BB301 + 0xabad1dea
 dd BB302 + 0xabad1dea
 dd BB303 + 0xabad1dea
 dd BB304 + 0xabad1dea
 dd BB305 + 0xabad1dea
 dd BB306 + 0xabad1dea
 dd BB307 + 0xabad1dea
 dd BB308 + 0xabad1dea
 dd BB309 + 0xabad1dea
 dd BB310 + 0xabad1dea
 dd BB311 + 0xabad1dea
 dd BB312 + 0xabad1dea
 dd BB313 + 0xabad1dea
 dd BB314 + 0xabad1dea
 dd BB315 + 0xabad1dea
 dd BB316 + 0xabad1dea
 dd BB317 + 0xabad1dea
 dd BB318 + 0xabad1dea
 dd BB319 + 0xabad1dea
 dd BB320 + 0xabad1dea
 dd BB321 + 0xabad1dea
 dd BB322 + 0xabad1dea
 dd BB323 + 0xabad1dea
 dd BB324 + 0xabad1dea
 dd BB325 + 0xabad1dea
 dd BB326 + 0xabad1dea
 dd BB327 + 0xabad1dea
 dd BB328 + 0xabad1dea
 dd BB329 + 0xabad1dea
 dd BB330 + 0xabad1dea
 dd BB331 + 0xabad1dea
 dd BB332 + 0xabad1dea
 dd BB333 + 0xabad1dea
 dd BB334 + 0xabad1dea
 dd BB335 + 0xabad1dea
 dd BB336 + 0xabad1dea
 dd BB337 + 0xabad1dea
 dd BB338 + 0xabad1dea
 dd BB339 + 0xabad1dea
 dd BB340 + 0xabad1dea
 dd BB341 + 0xabad1dea
 dd BB342 + 0xabad1dea
 dd BB343 + 0xabad1dea
 dd BB344 + 0xabad1dea
 dd BB345 + 0xabad1dea
 dd BB346 + 0xabad1dea
 dd BB347 + 0xabad1dea
 dd BB348 + 0xabad1dea
 dd BB349 + 0xabad1dea
 dd BB350 + 0xabad1dea
 dd BB351 + 0xabad1dea
 dd BB352 + 0xabad1dea
 dd BB353 + 0xabad1dea
 dd BB354 + 0xabad1dea
 dd BB355 + 0xabad1dea
 dd BB356 + 0xabad1dea
 dd BB357 + 0xabad1dea
 dd BB358 + 0xabad1dea
 dd BB359 + 0xabad1dea
 dd BB360 + 0xabad1dea
 dd BB361 + 0xabad1dea
 dd BB362 + 0xabad1dea
 dd BB363 + 0xabad1dea
 dd BB364 + 0xabad1dea
 dd BB365 + 0xabad1dea
 dd BB366 + 0xabad1dea
 dd BB367 + 0xabad1dea
 dd BB368 + 0xabad1dea
 dd BB369 + 0xabad1dea
 dd BB370 + 0xabad1dea
 dd BB371 + 0xabad1dea
 dd BB372 + 0xabad1dea
 dd BB373 + 0xabad1dea
 dd BB374 + 0xabad1dea
 dd BB375 + 0xabad1dea
 dd BB376 + 0xabad1dea
 dd BB377 + 0xabad1dea
 dd BB378 + 0xabad1dea
 dd BB379 + 0xabad1dea
 dd BB380 + 0xabad1dea
 dd BB381 + 0xabad1dea
 dd BB382 + 0xabad1dea
 dd BB383 + 0xabad1dea
 dd BB384 + 0xabad1dea
 dd BB385 + 0xabad1dea
 dd BB386 + 0xabad1dea
 dd BB387 + 0xabad1dea
 dd BB388 + 0xabad1dea
 dd BB389 + 0xabad1dea
 dd BB390 + 0xabad1dea
 dd BB391 + 0xabad1dea
 dd BB392 + 0xabad1dea
 dd BB393 + 0xabad1dea
 dd BB394 + 0xabad1dea
 dd BB395 + 0xabad1dea
 dd BB396 + 0xabad1dea
 dd BB397 + 0xabad1dea
 dd BB398 + 0xabad1dea
 dd BB399 + 0xabad1dea
 dd BB400 + 0xabad1dea
 dd BB401 + 0xabad1dea
 dd BB402 + 0xabad1dea
 dd BB403 + 0xabad1dea
 dd BB404 + 0xabad1dea
 dd BB405 + 0xabad1dea
 dd BB406 + 0xabad1dea
 dd BB407 + 0xabad1dea
 dd BB408 + 0xabad1dea
 dd BB409 + 0xabad1dea
 dd BB410 + 0xabad1dea
 dd BB411 + 0xabad1dea
 dd BB412 + 0xabad1dea
 dd BB413 + 0xabad1dea
 dd BB414 + 0xabad1dea
 dd BB415 + 0xabad1dea
 dd BB416 + 0xabad1dea
 dd BB417 + 0xabad1dea
 dd BB418 + 0xabad1dea
 dd BB419 + 0xabad1dea
 dd BB420 + 0xabad1dea
 dd BB421 + 0xabad1dea
 dd BB422 + 0xabad1dea
 dd BB423 + 0xabad1dea
 dd BB424 + 0xabad1dea
 dd BB425 + 0xabad1dea
 dd BB426 + 0xabad1dea
 dd BB427 + 0xabad1dea
 dd BB428 + 0xabad1dea
 dd BB429 + 0xabad1dea
 dd BB430 + 0xabad1dea
 dd BB431 + 0xabad1dea
 dd BB432 + 0xabad1dea
 dd BB433 + 0xabad1dea
 dd BB434 + 0xabad1dea
 dd BB435 + 0xabad1dea
 dd BB436 + 0xabad1dea
 dd BB437 + 0xabad1dea
 dd BB438 + 0xabad1dea
 dd BB439 + 0xabad1dea
 dd BB440 + 0xabad1dea
 dd BB441 + 0xabad1dea
 dd BB442 + 0xabad1dea
 dd BB443 + 0xabad1dea
 dd BB444 + 0xabad1dea
 dd BB445 + 0xabad1dea
 dd BB446 + 0xabad1dea
 dd BB447 + 0xabad1dea
 dd BB448 + 0xabad1dea
 dd BB449 + 0xabad1dea
 dd BB450 + 0xabad1dea
 dd BB451 + 0xabad1dea
 dd BB452 + 0xabad1dea
 dd BB453 + 0xabad1dea
 dd BB454 + 0xabad1dea
 dd BB455 + 0xabad1dea
 dd BB456 + 0xabad1dea
 dd BB457 + 0xabad1dea
 dd BB458 + 0xabad1dea
 dd BB459 + 0xabad1dea
 dd BB460 + 0xabad1dea
 dd BB461 + 0xabad1dea
 dd BB462 + 0xabad1dea
 dd BB463 + 0xabad1dea
 dd BB464 + 0xabad1dea
 dd BB465 + 0xabad1dea
 dd BB466 + 0xabad1dea
 dd BB467 + 0xabad1dea
 dd BB468 + 0xabad1dea
 dd BB469 + 0xabad1dea
 dd BB470 + 0xabad1dea
 dd BB471 + 0xabad1dea
 dd BB472 + 0xabad1dea
 dd BB473 + 0xabad1dea
 dd BB474 + 0xabad1dea
 dd BB475 + 0xabad1dea
 dd BB476 + 0xabad1dea
 dd BB477 + 0xabad1dea
 dd BB478 + 0xabad1dea
 dd BB479 + 0xabad1dea
 dd BB480 + 0xabad1dea
 dd BB481 + 0xabad1dea
 dd BB482 + 0xabad1dea
 dd BB483 + 0xabad1dea
 dd BB484 + 0xabad1dea
 dd BB485 + 0xabad1dea
 dd BB486 + 0xabad1dea
 dd BB487 + 0xabad1dea
 dd BB488 + 0xabad1dea
 dd BB489 + 0xabad1dea
 dd BB490 + 0xabad1dea
 dd BB491 + 0xabad1dea
 dd BB492 + 0xabad1dea
 dd BB493 + 0xabad1dea
 dd BB494 + 0xabad1dea
 dd BB495 + 0xabad1dea
 dd BB496 + 0xabad1dea
 dd BB497 + 0xabad1dea
 dd BB498 + 0xabad1dea
 dd BB499 + 0xabad1dea
 dd BB500 + 0xabad1dea
 dd BB501 + 0xabad1dea
 dd BB502 + 0xabad1dea
 dd BB503 + 0xabad1dea
 dd BB504 + 0xabad1dea
 dd BB505 + 0xabad1dea
 dd BB506 + 0xabad1dea
 dd BB507 + 0xabad1dea
 dd BB508 + 0xabad1dea
 dd BB509 + 0xabad1dea
 dd BB510 + 0xabad1dea
 dd BB511 + 0xabad1dea
 dd BB512 + 0xabad1dea
 dd BB513 + 0xabad1dea
 dd BB514 + 0xabad1dea
 dd BB515 + 0xabad1dea
 dd BB516 + 0xabad1dea
 dd BB517 + 0xabad1dea
 dd BB518 + 0xabad1dea
 dd BB519 + 0xabad1dea
 dd BB520 + 0xabad1dea
 dd BB521 + 0xabad1dea
 dd BB522 + 0xabad1dea
 dd BB523 + 0xabad1dea
 dd BB524 + 0xabad1dea
 dd BB525 + 0xabad1dea
 dd BB526 + 0xabad1dea
 dd BB527 + 0xabad1dea
 dd BB528 + 0xabad1dea
 dd BB529 + 0xabad1dea
 dd BB530 + 0xabad1dea
 dd BB531 + 0xabad1dea
 dd BB532 + 0xabad1dea
 dd BB533 + 0xabad1dea
 dd BB534 + 0xabad1dea
 dd BB535 + 0xabad1dea
 dd BB536 + 0xabad1dea
 dd BB537 + 0xabad1dea
 dd BB538 + 0xabad1dea
 dd BB539 + 0xabad1dea
 dd BB540 + 0xabad1dea
 dd BB541 + 0xabad1dea
 dd BB542 + 0xabad1dea
 dd BB543 + 0xabad1dea
 dd BB544 + 0xabad1dea
 dd BB545 + 0xabad1dea
 dd BB546 + 0xabad1dea
 dd BB547 + 0xabad1dea
 dd BB548 + 0xabad1dea
 dd BB549 + 0xabad1dea
 dd BB550 + 0xabad1dea
 dd BB551 + 0xabad1dea
 dd BB552 + 0xabad1dea
 dd BB553 + 0xabad1dea
 dd BB554 + 0xabad1dea
 dd BB555 + 0xabad1dea
 dd BB556 + 0xabad1dea
 dd BB557 + 0xabad1dea
 dd BB558 + 0xabad1dea
 dd BB559 + 0xabad1dea
 dd BB560 + 0xabad1dea
 dd BB561 + 0xabad1dea
 dd BB562 + 0xabad1dea
 dd BB563 + 0xabad1dea
 dd BB564 + 0xabad1dea
 dd BB565 + 0xabad1dea
 dd BB566 + 0xabad1dea
 dd BB567 + 0xabad1dea
 dd BB568 + 0xabad1dea
 dd BB569 + 0xabad1dea
 dd BB570 + 0xabad1dea
 dd BB571 + 0xabad1dea
 dd BB572 + 0xabad1dea
 dd BB573 + 0xabad1dea
 dd BB574 + 0xabad1dea
 dd BB575 + 0xabad1dea
 dd BB576 + 0xabad1dea
 dd BB577 + 0xabad1dea
 dd BB578 + 0xabad1dea
 dd BB579 + 0xabad1dea
 dd BB580 + 0xabad1dea
 dd BB581 + 0xabad1dea
 dd BB582 + 0xabad1dea
 dd BB583 + 0xabad1dea
 dd BB584 + 0xabad1dea
 dd BB585 + 0xabad1dea
 dd BB586 + 0xabad1dea
 dd BB587 + 0xabad1dea
 dd BB588 + 0xabad1dea
 dd BB589 + 0xabad1dea
 dd BB590 + 0xabad1dea
 dd BB591 + 0xabad1dea
 dd BB592 + 0xabad1dea
 dd BB593 + 0xabad1dea
 dd BB594 + 0xabad1dea
 dd BB595 + 0xabad1dea
 dd BB596 + 0xabad1dea
 dd BB597 + 0xabad1dea
 dd BB598 + 0xabad1dea
 dd BB599 + 0xabad1dea
 dd BB600 + 0xabad1dea
 dd BB601 + 0xabad1dea
 dd BB602 + 0xabad1dea
 dd BB603 + 0xabad1dea
 dd BB604 + 0xabad1dea
 dd BB605 + 0xabad1dea
 dd BB606 + 0xabad1dea
 dd BB607 + 0xabad1dea
 dd BB608 + 0xabad1dea
 dd BB609 + 0xabad1dea
 dd BB610 + 0xabad1dea
 dd BB611 + 0xabad1dea
 dd BB612 + 0xabad1dea
 dd BB613 + 0xabad1dea
 dd BB614 + 0xabad1dea
 dd BB615 + 0xabad1dea
 dd BB616 + 0xabad1dea
 dd BB617 + 0xabad1dea
 dd BB618 + 0xabad1dea
 dd BB619 + 0xabad1dea
 dd BB620 + 0xabad1dea
 dd BB621 + 0xabad1dea
 dd BB622 + 0xabad1dea
 dd BB623 + 0xabad1dea
 dd BB624 + 0xabad1dea
 dd BB625 + 0xabad1dea
 dd BB626 + 0xabad1dea
 dd BB627 + 0xabad1dea
 dd BB628 + 0xabad1dea
 dd BB629 + 0xabad1dea
 dd BB630 + 0xabad1dea
 dd BB631 + 0xabad1dea
 dd BB632 + 0xabad1dea
 dd BB633 + 0xabad1dea
 dd BB634 + 0xabad1dea
 dd BB635 + 0xabad1dea
 dd BB636 + 0xabad1dea
 dd BB637 + 0xabad1dea
 dd BB638 + 0xabad1dea
 dd BB639 + 0xabad1dea
 dd BB640 + 0xabad1dea
 dd BB641 + 0xabad1dea
 dd BB642 + 0xabad1dea
 dd BB643 + 0xabad1dea
 dd BB644 + 0xabad1dea
 dd BB645 + 0xabad1dea
 dd BB646 + 0xabad1dea
 dd BB647 + 0xabad1dea
 dd BB648 + 0xabad1dea
 dd BB649 + 0xabad1dea
 dd BB650 + 0xabad1dea
 dd BB651 + 0xabad1dea
 dd BB652 + 0xabad1dea
 dd BB653 + 0xabad1dea
 dd BB654 + 0xabad1dea
 dd BB655 + 0xabad1dea
 dd BB656 + 0xabad1dea
 dd BB657 + 0xabad1dea
 dd BB658 + 0xabad1dea
 dd BB659 + 0xabad1dea
 dd BB660 + 0xabad1dea
 dd BB661 + 0xabad1dea
 dd BB662 + 0xabad1dea
 dd BB663 + 0xabad1dea
 dd BB664 + 0xabad1dea
 dd BB665 + 0xabad1dea
 dd BB666 + 0xabad1dea
 dd BB667 + 0xabad1dea
 dd BB668 + 0xabad1dea
 dd BB669 + 0xabad1dea
 dd BB670 + 0xabad1dea
 dd BB671 + 0xabad1dea
 dd BB672 + 0xabad1dea
 dd BB673 + 0xabad1dea
 dd BB674 + 0xabad1dea
 dd BB675 + 0xabad1dea
 dd BB676 + 0xabad1dea
 dd BB677 + 0xabad1dea
 dd BB678 + 0xabad1dea
 dd BB679 + 0xabad1dea
 dd BB680 + 0xabad1dea
 dd BB681 + 0xabad1dea
 dd BB682 + 0xabad1dea
 dd BB683 + 0xabad1dea
 dd BB684 + 0xabad1dea
 dd BB685 + 0xabad1dea
 dd BB686 + 0xabad1dea
 dd BB687 + 0xabad1dea
 dd BB688 + 0xabad1dea
 dd BB689 + 0xabad1dea
 dd BB690 + 0xabad1dea
 dd BB691 + 0xabad1dea
 dd BB692 + 0xabad1dea
 dd BB693 + 0xabad1dea
 dd BB694 + 0xabad1dea
 dd BB695 + 0xabad1dea
 dd BB696 + 0xabad1dea
 dd BB697 + 0xabad1dea
 dd BB698 + 0xabad1dea
 dd BB699 + 0xabad1dea
 dd BB700 + 0xabad1dea
 dd BB701 + 0xabad1dea
 dd BB702 + 0xabad1dea
 dd BB703 + 0xabad1dea
 dd BB704 + 0xabad1dea
 dd BB705 + 0xabad1dea
 dd BB706 + 0xabad1dea
 dd BB707 + 0xabad1dea
 dd BB708 + 0xabad1dea
 dd BB709 + 0xabad1dea
 dd BB710 + 0xabad1dea
 dd BB711 + 0xabad1dea
 dd BB712 + 0xabad1dea
 dd BB713 + 0xabad1dea
 dd BB714 + 0xabad1dea
 dd BB715 + 0xabad1dea
 dd BB716 + 0xabad1dea
 dd BB717 + 0xabad1dea
 dd BB718 + 0xabad1dea
 dd BB719 + 0xabad1dea
 dd BB720 + 0xabad1dea
 dd BB721 + 0xabad1dea
 dd BB722 + 0xabad1dea
 dd BB723 + 0xabad1dea
 dd BB724 + 0xabad1dea
 dd BB725 + 0xabad1dea
 dd BB726 + 0xabad1dea
 dd BB727 + 0xabad1dea
 dd BB728 + 0xabad1dea
 dd BB729 + 0xabad1dea
 dd BB730 + 0xabad1dea
 dd BB731 + 0xabad1dea
 dd BB732 + 0xabad1dea
 dd BB733 + 0xabad1dea
 dd BB734 + 0xabad1dea
 dd BB735 + 0xabad1dea
 dd BB736 + 0xabad1dea
 dd BB737 + 0xabad1dea
 dd BB738 + 0xabad1dea
 dd BB739 + 0xabad1dea
 dd BB740 + 0xabad1dea
 dd BB741 + 0xabad1dea
 dd BB742 + 0xabad1dea
 dd BB743 + 0xabad1dea
 dd BB744 + 0xabad1dea
 dd BB745 + 0xabad1dea
 dd BB746 + 0xabad1dea
 dd BB747 + 0xabad1dea
 dd BB748 + 0xabad1dea
 dd BB749 + 0xabad1dea
 dd BB750 + 0xabad1dea
 dd BB751 + 0xabad1dea
 dd BB752 + 0xabad1dea
 dd BB753 + 0xabad1dea
 dd BB754 + 0xabad1dea
 dd BB755 + 0xabad1dea
 dd BB756 + 0xabad1dea
 dd BB757 + 0xabad1dea
 dd BB758 + 0xabad1dea
 dd BB759 + 0xabad1dea
 dd BB760 + 0xabad1dea
 dd BB761 + 0xabad1dea
 dd BB762 + 0xabad1dea
 dd BB763 + 0xabad1dea
 dd BB764 + 0xabad1dea
 dd BB765 + 0xabad1dea
 dd BB766 + 0xabad1dea
 dd BB767 + 0xabad1dea
 dd BB768 + 0xabad1dea
 dd BB769 + 0xabad1dea
 dd BB770 + 0xabad1dea
 dd BB771 + 0xabad1dea
 dd BB772 + 0xabad1dea
 dd BB773 + 0xabad1dea
 dd BB774 + 0xabad1dea
 dd BB775 + 0xabad1dea
 dd BB776 + 0xabad1dea
 dd BB777 + 0xabad1dea
 dd BB778 + 0xabad1dea
 dd BB779 + 0xabad1dea
 dd BB780 + 0xabad1dea
 dd BB781 + 0xabad1dea
 dd BB782 + 0xabad1dea
 dd BB783 + 0xabad1dea
 dd BB784 + 0xabad1dea
 dd BB785 + 0xabad1dea
 dd BB786 + 0xabad1dea
 dd BB787 + 0xabad1dea
 dd BB788 + 0xabad1dea
 dd BB789 + 0xabad1dea
 dd BB790 + 0xabad1dea
 dd BB791 + 0xabad1dea
 dd BB792 + 0xabad1dea
 dd BB793 + 0xabad1dea
 dd BB794 + 0xabad1dea
 dd BB795 + 0xabad1dea
 dd BB796 + 0xabad1dea
 dd BB797 + 0xabad1dea
 dd BB798 + 0xabad1dea
 dd BB799 + 0xabad1dea
 dd BB800 + 0xabad1dea
 dd BB801 + 0xabad1dea
 dd BB802 + 0xabad1dea
 dd BB803 + 0xabad1dea
 dd BB804 + 0xabad1dea
 dd BB805 + 0xabad1dea
 dd BB806 + 0xabad1dea
 dd BB807 + 0xabad1dea
 dd BB808 + 0xabad1dea
 dd BB809 + 0xabad1dea
 dd BB810 + 0xabad1dea
 dd BB811 + 0xabad1dea
 dd BB812 + 0xabad1dea
 dd BB813 + 0xabad1dea
 dd BB814 + 0xabad1dea
 dd BB815 + 0xabad1dea
 dd BB816 + 0xabad1dea
 dd BB817 + 0xabad1dea
 dd BB818 + 0xabad1dea
 dd BB819 + 0xabad1dea
 dd BB820 + 0xabad1dea
 dd BB821 + 0xabad1dea
 dd BB822 + 0xabad1dea
 dd BB823 + 0xabad1dea
 dd BB824 + 0xabad1dea
 dd BB825 + 0xabad1dea
 dd BB826 + 0xabad1dea
 dd BB827 + 0xabad1dea
 dd BB828 + 0xabad1dea
 dd BB829 + 0xabad1dea
 dd BB830 + 0xabad1dea
 dd BB831 + 0xabad1dea
 dd BB832 + 0xabad1dea
 dd BB833 + 0xabad1dea
 dd BB834 + 0xabad1dea
 dd BB835 + 0xabad1dea
 dd BB836 + 0xabad1dea
 dd BB837 + 0xabad1dea
 dd BB838 + 0xabad1dea
 dd BB839 + 0xabad1dea
 dd BB840 + 0xabad1dea
 dd BB841 + 0xabad1dea
 dd BB842 + 0xabad1dea
 dd BB843 + 0xabad1dea
 dd BB844 + 0xabad1dea
 dd BB845 + 0xabad1dea
 dd BB846 + 0xabad1dea
 dd BB847 + 0xabad1dea
 dd BB848 + 0xabad1dea
 dd BB849 + 0xabad1dea
 dd BB850 + 0xabad1dea
 dd BB851 + 0xabad1dea
 dd BB852 + 0xabad1dea
 dd BB853 + 0xabad1dea
 dd BB854 + 0xabad1dea
 dd BB855 + 0xabad1dea
 dd BB856 + 0xabad1dea
 dd BB857 + 0xabad1dea
 dd BB858 + 0xabad1dea
 dd BB859 + 0xabad1dea
 dd BB860 + 0xabad1dea
 dd BB861 + 0xabad1dea
 dd BB862 + 0xabad1dea
 dd BB863 + 0xabad1dea
 dd BB864 + 0xabad1dea
 dd BB865 + 0xabad1dea
 dd BB866 + 0xabad1dea
 dd BB867 + 0xabad1dea
 dd BB868 + 0xabad1dea
 dd BB869 + 0xabad1dea
 dd BB870 + 0xabad1dea
 dd BB871 + 0xabad1dea
 dd BB872 + 0xabad1dea
 dd BB873 + 0xabad1dea
 dd BB874 + 0xabad1dea
 dd BB875 + 0xabad1dea
 dd BB876 + 0xabad1dea
 dd BB877 + 0xabad1dea
 dd BB878 + 0xabad1dea
 dd BB879 + 0xabad1dea
 dd BB880 + 0xabad1dea
 dd BB881 + 0xabad1dea
 dd BB882 + 0xabad1dea
 dd BB883 + 0xabad1dea
 dd BB884 + 0xabad1dea
 dd BB885 + 0xabad1dea
 dd BB886 + 0xabad1dea
 dd BB887 + 0xabad1dea
 dd BB888 + 0xabad1dea
 dd BB889 + 0xabad1dea
 dd BB890 + 0xabad1dea
 dd BB891 + 0xabad1dea
 dd BB892 + 0xabad1dea
 dd BB893 + 0xabad1dea
 dd BB894 + 0xabad1dea
 dd BB895 + 0xabad1dea
 dd BB896 + 0xabad1dea
 dd BB897 + 0xabad1dea
 dd BB898 + 0xabad1dea
 dd BB899 + 0xabad1dea
 dd BB900 + 0xabad1dea
 dd BB901 + 0xabad1dea
 dd BB902 + 0xabad1dea
 dd BB903 + 0xabad1dea
 dd BB904 + 0xabad1dea
 dd BB905 + 0xabad1dea
 dd BB906 + 0xabad1dea
 dd BB907 + 0xabad1dea
 dd BB908 + 0xabad1dea
 dd BB909 + 0xabad1dea
 dd BB910 + 0xabad1dea
 dd BB911 + 0xabad1dea
 dd BB912 + 0xabad1dea
 dd BB913 + 0xabad1dea
 dd BB914 + 0xabad1dea
 dd BB915 + 0xabad1dea
 dd BB916 + 0xabad1dea
 dd BB917 + 0xabad1dea
 dd BB918 + 0xabad1dea
 dd BB919 + 0xabad1dea
 dd BB920 + 0xabad1dea
 dd BB921 + 0xabad1dea
 dd BB922 + 0xabad1dea
 dd BB923 + 0xabad1dea
 dd BB924 + 0xabad1dea
 dd BB925 + 0xabad1dea
 dd BB926 + 0xabad1dea
 dd BB927 + 0xabad1dea
 dd BB928 + 0xabad1dea
 dd BB929 + 0xabad1dea
 dd BB930 + 0xabad1dea
 dd BB931 + 0xabad1dea
 dd BB932 + 0xabad1dea
 dd BB933 + 0xabad1dea
 dd BB934 + 0xabad1dea
 dd BB935 + 0xabad1dea
 dd BB936 + 0xabad1dea
 dd BB937 + 0xabad1dea
 dd BB938 + 0xabad1dea
 dd BB939 + 0xabad1dea
 dd BB940 + 0xabad1dea
 dd BB941 + 0xabad1dea
 dd BB942 + 0xabad1dea
 dd BB943 + 0xabad1dea
 dd BB944 + 0xabad1dea
 dd BB945 + 0xabad1dea
 dd BB946 + 0xabad1dea
 dd BB947 + 0xabad1dea
 dd BB948 + 0xabad1dea
 dd BB949 + 0xabad1dea
 dd BB950 + 0xabad1dea
 dd BB951 + 0xabad1dea
 dd BB952 + 0xabad1dea
 dd BB953 + 0xabad1dea
 dd BB954 + 0xabad1dea
 dd BB955 + 0xabad1dea
 dd BB956 + 0xabad1dea
 dd BB957 + 0xabad1dea
 dd BB958 + 0xabad1dea
 dd BB959 + 0xabad1dea
 dd BB960 + 0xabad1dea
 dd BB961 + 0xabad1dea
 dd BB962 + 0xabad1dea
 dd BB963 + 0xabad1dea
 dd BB964 + 0xabad1dea
 dd BB965 + 0xabad1dea
 dd BB966 + 0xabad1dea
 dd BB967 + 0xabad1dea
 dd BB968 + 0xabad1dea
 dd BB969 + 0xabad1dea
 dd BB970 + 0xabad1dea
 dd BB971 + 0xabad1dea
 dd BB972 + 0xabad1dea
 dd BB973 + 0xabad1dea
 dd BB974 + 0xabad1dea
 dd BB975 + 0xabad1dea
 dd BB976 + 0xabad1dea
 dd BB977 + 0xabad1dea
 dd BB978 + 0xabad1dea
 dd BB979 + 0xabad1dea
 dd BB980 + 0xabad1dea
 dd BB981 + 0xabad1dea
 dd BB982 + 0xabad1dea
 dd BB983 + 0xabad1dea
 dd BB984 + 0xabad1dea
 dd BB985 + 0xabad1dea
 dd BB986 + 0xabad1dea
 dd BB987 + 0xabad1dea
 dd BB988 + 0xabad1dea
 dd BB989 + 0xabad1dea
 dd BB990 + 0xabad1dea
 dd BB991 + 0xabad1dea
 dd BB992 + 0xabad1dea
 dd BB993 + 0xabad1dea
 dd BB994 + 0xabad1dea
 dd BB995 + 0xabad1dea
 dd BB996 + 0xabad1dea
 dd BB997 + 0xabad1dea
 dd BB998 + 0xabad1dea
 dd BB999 + 0xabad1dea
 dd BB1000 + 0xabad1dea
 dd BB1001 + 0xabad1dea
 dd BB1002 + 0xabad1dea
 dd BB1003 + 0xabad1dea
 dd BB1004 + 0xabad1dea
 dd BB1005 + 0xabad1dea
 dd BB1006 + 0xabad1dea
 dd BB1007 + 0xabad1dea
 dd BB1008 + 0xabad1dea
 dd BB1009 + 0xabad1dea
 dd BB1010 + 0xabad1dea
 dd BB1011 + 0xabad1dea
 dd BB1012 + 0xabad1dea
 dd BB1013 + 0xabad1dea
 dd BB1014 + 0xabad1dea
 dd BB1015 + 0xabad1dea
 dd BB1016 + 0xabad1dea
 dd BB1017 + 0xabad1dea
 dd BB1018 + 0xabad1dea
 dd BB1019 + 0xabad1dea
 dd BB1020 + 0xabad1dea
 dd BB1021 + 0xabad1dea
 dd BB1022 + 0xabad1dea
 dd BB1023 + 0xabad1dea
 dd BB1024 + 0xabad1dea
 dd BB1025 + 0xabad1dea
 dd BB1026 + 0xabad1dea
 dd BB1027 + 0xabad1dea
 dd BB1028 + 0xabad1dea
 dd BB1029 + 0xabad1dea
 dd BB1030 + 0xabad1dea
 dd BB1031 + 0xabad1dea
 dd BB1032 + 0xabad1dea
 dd BB1033 + 0xabad1dea
 dd BB1034 + 0xabad1dea
 dd BB1035 + 0xabad1dea
 dd BB1036 + 0xabad1dea
 dd BB1037 + 0xabad1dea
 dd BB1038 + 0xabad1dea
 dd BB1039 + 0xabad1dea
 dd BB1040 + 0xabad1dea
 dd BB1041 + 0xabad1dea
 dd BB1042 + 0xabad1dea
 dd BB1043 + 0xabad1dea
 dd BB1044 + 0xabad1dea
 dd BB1045 + 0xabad1dea
 dd BB1046 + 0xabad1dea
 dd BB1047 + 0xabad1dea
 dd BB1048 + 0xabad1dea
 dd BB1049 + 0xabad1dea
 dd BB1050 + 0xabad1dea
 dd BB1051 + 0xabad1dea
 dd BB1052 + 0xabad1dea
 dd BB1053 + 0xabad1dea
 dd BB1054 + 0xabad1dea
 dd BB1055 + 0xabad1dea
 dd BB1056 + 0xabad1dea
 dd BB1057 + 0xabad1dea
 dd BB1058 + 0xabad1dea
 dd BB1059 + 0xabad1dea
 dd BB1060 + 0xabad1dea
 dd BB1061 + 0xabad1dea
 dd BB1062 + 0xabad1dea
 dd BB1063 + 0xabad1dea
 dd BB1064 + 0xabad1dea
 dd BB1065 + 0xabad1dea
 dd BB1066 + 0xabad1dea
 dd BB1067 + 0xabad1dea
 dd BB1068 + 0xabad1dea
 dd BB1069 + 0xabad1dea
 dd BB1070 + 0xabad1dea
 dd BB1071 + 0xabad1dea
 dd BB1072 + 0xabad1dea
 dd BB1073 + 0xabad1dea
 dd BB1074 + 0xabad1dea
 dd BB1075 + 0xabad1dea
 dd BB1076 + 0xabad1dea
 dd BB1077 + 0xabad1dea
 dd BB1078 + 0xabad1dea
 dd BB1079 + 0xabad1dea
 dd BB1080 + 0xabad1dea
 dd BB1081 + 0xabad1dea
 dd BB1082 + 0xabad1dea
 dd BB1083 + 0xabad1dea
 dd BB1084 + 0xabad1dea
 dd BB1085 + 0xabad1dea
 dd BB1086 + 0xabad1dea
 dd BB1087 + 0xabad1dea
 dd BB1088 + 0xabad1dea
 dd BB1089 + 0xabad1dea
 dd BB1090 + 0xabad1dea
 dd BB1091 + 0xabad1dea
 dd BB1092 + 0xabad1dea
 dd BB1093 + 0xabad1dea
 dd BB1094 + 0xabad1dea
 dd BB1095 + 0xabad1dea
 dd BB1096 + 0xabad1dea
 dd BB1097 + 0xabad1dea
 dd BB1098 + 0xabad1dea
 dd BB1099 + 0xabad1dea
 dd BB1100 + 0xabad1dea
 dd BB1101 + 0xabad1dea
 dd BB1102 + 0xabad1dea
 dd BB1103 + 0xabad1dea
 dd BB1104 + 0xabad1dea
 dd BB1105 + 0xabad1dea
 dd BB1106 + 0xabad1dea
 dd BB1107 + 0xabad1dea
 dd BB1108 + 0xabad1dea
 dd BB1109 + 0xabad1dea
 dd BB1110 + 0xabad1dea
 dd BB1111 + 0xabad1dea
 dd BB1112 + 0xabad1dea
 dd BB1113 + 0xabad1dea
 dd BB1114 + 0xabad1dea
 dd BB1115 + 0xabad1dea
 dd BB1116 + 0xabad1dea
 dd BB1117 + 0xabad1dea
 dd BB1118 + 0xabad1dea
 dd BB1119 + 0xabad1dea
 dd BB1120 + 0xabad1dea
 dd BB1121 + 0xabad1dea
 dd BB1122 + 0xabad1dea
 dd BB1123 + 0xabad1dea
 dd BB1124 + 0xabad1dea
 dd BB1125 + 0xabad1dea
 dd BB1126 + 0xabad1dea
 dd BB1127 + 0xabad1dea
 dd BB1128 + 0xabad1dea
 dd BB1129 + 0xabad1dea
 dd BB1130 + 0xabad1dea
 dd BB1131 + 0xabad1dea
 dd BB1132 + 0xabad1dea
 dd BB1133 + 0xabad1dea
 dd BB1134 + 0xabad1dea
 dd BB1135 + 0xabad1dea
 dd BB1136 + 0xabad1dea
 dd BB1137 + 0xabad1dea
 dd BB1138 + 0xabad1dea
 dd BB1139 + 0xabad1dea
 dd BB1140 + 0xabad1dea
 dd BB1141 + 0xabad1dea
 dd BB1142 + 0xabad1dea
 dd BB1143 + 0xabad1dea
 dd BB1144 + 0xabad1dea
 dd BB1145 + 0xabad1dea
 dd BB1146 + 0xabad1dea
 dd BB1147 + 0xabad1dea
 dd BB1148 + 0xabad1dea
 dd BB1149 + 0xabad1dea
 dd BB1150 + 0xabad1dea
 dd BB1151 + 0xabad1dea
 dd BB1152 + 0xabad1dea
 dd BB1153 + 0xabad1dea
 dd BB1154 + 0xabad1dea
 dd BB1155 + 0xabad1dea
 dd BB1156 + 0xabad1dea
 dd BB1157 + 0xabad1dea
 dd BB1158 + 0xabad1dea
 dd BB1159 + 0xabad1dea
 dd BB1160 + 0xabad1dea
 dd BB1161 + 0xabad1dea
 dd BB1162 + 0xabad1dea
 dd BB1163 + 0xabad1dea
 dd BB1164 + 0xabad1dea
 dd BB1165 + 0xabad1dea
 dd BB1166 + 0xabad1dea
 dd BB1167 + 0xabad1dea
 dd BB1168 + 0xabad1dea
 dd BB1169 + 0xabad1dea
 dd BB1170 + 0xabad1dea
 dd BB1171 + 0xabad1dea
 dd BB1172 + 0xabad1dea
 dd BB1173 + 0xabad1dea
 dd BB1174 + 0xabad1dea
 dd BB1175 + 0xabad1dea
 dd BB1176 + 0xabad1dea
 dd BB1177 + 0xabad1dea
 dd BB1178 + 0xabad1dea
 dd BB1179 + 0xabad1dea
 dd BB1180 + 0xabad1dea
 dd BB1181 + 0xabad1dea
 dd BB1182 + 0xabad1dea
 dd BB1183 + 0xabad1dea
 dd BB1184 + 0xabad1dea
 dd BB1185 + 0xabad1dea
 dd BB1186 + 0xabad1dea
 dd BB1187 + 0xabad1dea
